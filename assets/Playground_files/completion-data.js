[].push.apply(window.complationData, [{"path": "ReasonReactOptimizedCreateClass", "name": "_assign", "type": "let _assign: (Js.t(&lt; .. &gt;), Js.t(&lt; .. &gt;)) => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "Js.t(&lt; .. &gt;)"], ["", "Js.t(&lt; .. &gt;)"]]}, {"path": "ReasonReactOptimizedCreateClass", "name": "emptyObject", "type": "let emptyObject: Js.t(&lt; .. &gt;)", "docs": null, "kind": "value"}, {"path": "ReasonReactOptimizedCreateClass", "name": "factory", "type": "let factory: 'a", "docs": null, "kind": "value"}, {"path": "ReasonReactOptimizedCreateClass", "name": "reactComponent", "type": "let reactComponent: 'a", "docs": null, "kind": "value"}, {"path": "ReasonReactOptimizedCreateClass", "name": "reactIsValidElement", "type": "let reactIsValidElement: Js.boolean", "docs": null, "kind": "value"}, {"path": "ReasonReactOptimizedCreateClass", "name": "newReactComponent", "type": "let newReactComponent: unit => Js.t(&lt; updater : 'a &gt;)", "docs": null, "kind": "value", "args": [["", "unit"]]}, {"path": "ReasonReactOptimizedCreateClass", "name": "reactNoopUpdateQueue", "type": "let reactNoopUpdateQueue: 'a", "docs": null, "kind": "value"}, {"path": "ReasonReactOptimizedCreateClass", "name": "createClass", "type": "let createClass: 'a", "docs": null, "kind": "value"}, {"path": "", "name": "ReasonReactOptimizedCreateClass", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_assign\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>createClass\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>emptyObject\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>factory\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>newReactComponent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>reactComponent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>reactIsValidElement\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>reactNoopUpdateQueue", "docs": null, "kind": "module"}, {"path": "ReasonReact", "name": "reactClass", "type": "type reactClass", "docs": "<ul><li>This API assumes that JSX will desugar the following:</li></ul>\n\n<pre><code># let module Foo = {\n#    let make = (~attr1, ~attrn, children) =&gt; ReasonReact.statelessComponent(&quot;Foo&quot;);\n# };\nlet a = &lt;Foo key=&quot;&quot; ref=((_) =&gt; ()) attr1=0 attrn=1 /&gt;;\nlet b = ReasonReact.element(\n  ~key=&quot;&quot;, ~ref=((_) =&gt; ()),\n  Foo.make(~attr1=0, ~attrn=1, [| |])\n);</code></pre>", "kind": "type"}, {"path": "ReasonReact", "name": "reactElement", "type": "type reactElement", "docs": null, "kind": "type"}, {"path": "ReasonReact", "name": "reactRef", "type": "type reactRef", "docs": null, "kind": "type"}, {"path": "ReasonReact", "name": "nullElement", "type": "let nullElement: reactElement", "docs": null, "kind": "value"}, {"path": "ReasonReact", "name": "stringToElement", "type": "let stringToElement: string => reactElement", "docs": "<p>Use this for creating an element that&#39;s just text.</p>\n<p>In Reason&#39;s JSX, text is not automatically wrapped, you have to do it manually:</p>\n<pre class='reason;div;use(render)'><code class='reason;div;use(render)'>&lt;div&gt;\n (ReasonReact.stringToElement(&quot;Hello folks&quot;))\n&lt;/div&gt;</code></pre>", "kind": "value", "args": [["", "string"]]}, {"path": "ReasonReact", "name": "arrayToElement", "type": "let arrayToElement: array(reactElement) => reactElement", "docs": "<p> Convert an array of keyed react elements to a react element.</p>\n", "kind": "value", "args": [["", "array(reactElement)"]]}, {"path": "ReasonReact", "name": "refToJsObj", "type": "let refToJsObj: reactRef => Js.t(&lt; .. &gt;)", "docs": "<p> <strong>Unsafe</strong> get an untyped javascript object representation of a react ref.</p>\n", "kind": "value", "args": [["", "reactRef"]]}, {"path": "ReasonReact", "name": "createElement", "type": "let createElement: (\n  reactClass,\n  ~?props: option(Js.t(&lt; .. &gt;)),\n  array(reactElement)\n) => reactElement", "docs": null, "kind": "value", "args": [["", "reactClass"], ["props", "Js.t(&lt; .. &gt;) (optional)"], ["", "array(reactElement)"]]}, {"path": "ReasonReact", "name": "cloneElement", "type": "let cloneElement: (\n  reactElement,\n  ~?props: option(Js.t(&lt; .. &gt;)),\n  array(reactElement)\n) => reactElement", "docs": null, "kind": "value", "args": [["", "reactElement"], ["props", "Js.t(&lt; .. &gt;) (optional)"], ["", "array(reactElement)"]]}, {"path": "ReasonReact", "name": "renderNotImplemented", "type": "type renderNotImplemented = | RenderNotImplemented\n", "docs": null, "kind": "type"}, {"path": "ReasonReact", "name": "stateless", "type": "type stateless = unit", "docs": "<p>A stateless component is a component with state of type unit. This cannot be\nabstract for now, because a stateless component&#39;s willReceiveProps needs to\nreturn the state, aka unit. We can provide a helper\nReasonReact.statelessReturn that&#39;s of type <code>stateless</code>, but that&#39;s verbose</p>\n", "kind": "type"}, {"path": "ReasonReact", "name": "noRetainedProps", "type": "type noRetainedProps", "docs": null, "kind": "type"}, {"path": "ReasonReact", "name": "actionless", "type": "type actionless = unit", "docs": "<p> An actionless component is a component with actions of type unit</p>\n", "kind": "type"}, {"path": "ReasonReact.Callback", "name": "t", "type": "type t('payload) = 'payload => unit", "docs": "<p>Type for callbacks</p>\n<p>This type can be left abstract to prevent calling the callback directly.\nFor example, calling <code>update handler event</code> would force an immediate\ncall of <code>handler</code> with the current state, and can be prevented by defining:</p>\n<pre><code>type t(&#39;payload);</code></pre><p>However, we do want to support immediate calling of a handler, as an escape hatch for the existing async\nsetState reactJS pattern</p>\n", "kind": "type"}, {"path": "ReasonReact.Callback", "name": "default", "type": "let default: t('payload)", "docs": "<p> Default no-op callback</p>\n", "kind": "value"}, {"path": "ReasonReact.Callback", "name": "chain", "type": "let chain: (t('payload), t('payload)) => t('payload)", "docs": "<p> Chain two callbacks by executing the first before the second one</p>\n", "kind": "value", "args": [["", "t('payload)"], ["", "t('payload)"]]}, {"path": "ReasonReact", "name": "Callback", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>chain\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>default\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t", "docs": null, "kind": "module"}, {"path": "ReasonReact", "name": "subscription", "type": "type subscription = | Sub(unit => 'token, 'token => unit): subscription\n", "docs": "<ul><li>Subscriptions handle resources that need to be initialized and finalized.\nInitialization returns a token, and finalization consumes a token.</li></ul>", "kind": "type"}, {"path": "ReasonReact", "name": "reduce", "type": "type reduce('payload, 'action) = 'payload => 'action => Callback.t('payload)", "docs": null, "kind": "type"}, {"path": "ReasonReact", "name": "update", "type": "type update('state, 'retainedProps, 'action) = \n  | NoUpdate\n  | Update('state)\n  | SideEffects(self('state, 'retainedProps, 'action) => unit)\n  | UpdateWithSideEffects('state, self('state, 'retainedProps, 'action) => unit)\n", "docs": null, "kind": "type"}, {"path": "ReasonReact", "name": "self", "type": "type self('state, 'retainedProps, 'action) = {\n  handle: 'payload.\n  ('payload -&gt; ('state, 'retainedProps, 'action) self -&gt; unit) -&gt;\n  'payload Callback.t,\n  reduce: 'payload. ('payload, 'action) reduce,\n  state: 'state,\n  retainedProps: 'retainedProps,\n  send: 'action => unit,\n  onUnmount: unit => unit => unit\n}", "docs": null, "kind": "type"}, {"path": "ReasonReact", "name": "reactClassInternal", "type": "type reactClassInternal", "docs": null, "kind": "type"}, {"path": "ReasonReact", "name": "jsElementWrapped", "type": "type jsElementWrapped", "docs": "<p> For internal use only</p>\n", "kind": "type"}, {"path": "ReasonReact", "name": "oldNewSelf", "type": "type oldNewSelf('state, 'retainedProps, 'action) = {\n  oldSelf: self('state, 'retainedProps, 'action),\n  newSelf: self('state, 'retainedProps, 'action)\n}", "docs": null, "kind": "type"}, {"path": "ReasonReact", "name": "componentSpec", "type": "type componentSpec('state, 'initialState, 'retainedProps, 'initialRetainedProps, 'action) = {\n  debugName: string,\n  reactClassInternal: reactClassInternal,\n  mut handedOffState: Pervasives.ref(option('state)),\n  willReceiveProps: self('state, 'retainedProps, 'action) => 'state,\n  didMount: self('state, 'retainedProps, 'action) => update('state, 'retainedProps, 'action),\n  didUpdate: oldNewSelf('state, 'retainedProps, 'action) => unit,\n  willUnmount: self('state, 'retainedProps, 'action) => unit,\n  willUpdate: oldNewSelf('state, 'retainedProps, 'action) => unit,\n  shouldUpdate: oldNewSelf('state, 'retainedProps, 'action) => bool,\n  render: self('state, 'retainedProps, 'action) => reactElement,\n  initialState: unit => 'initialState,\n  retainedProps: 'initialRetainedProps,\n  reducer: ('action, 'state) => update('state, 'retainedProps, 'action),\n  subscriptions: self('state, 'retainedProps, 'action) => list(subscription),\n  jsElementWrapped: jsElementWrapped\n}", "docs": null, "kind": "type"}, {"path": "ReasonReact", "name": "component", "type": "type component('state, 'retainedProps, 'action) = componentSpec(\n  'state,\n  'state,\n  'retainedProps,\n  'retainedProps,\n  'action\n)", "docs": null, "kind": "type"}, {"path": "ReasonReact", "name": "statelessComponent", "type": "let statelessComponent: string => componentSpec(\n  stateless,\n  stateless,\n  noRetainedProps,\n  noRetainedProps,\n  actionless\n)", "docs": "<p> Create a stateless component: i.e. a component where state has type stateless.</p>\n", "kind": "value", "args": [["", "string"]]}, {"path": "ReasonReact", "name": "statelessComponentWithRetainedProps", "type": "let statelessComponentWithRetainedProps: string => componentSpec(\n  stateless,\n  stateless,\n  'retainedProps,\n  noRetainedProps,\n  actionless\n)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "ReasonReact", "name": "reducerComponent", "type": "let reducerComponent: string => componentSpec(\n  'state,\n  stateless,\n  noRetainedProps,\n  noRetainedProps,\n  'action\n)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "ReasonReact", "name": "reducerComponentWithRetainedProps", "type": "let reducerComponentWithRetainedProps: string => componentSpec(\n  'state,\n  stateless,\n  'retainedProps,\n  noRetainedProps,\n  'action\n)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "ReasonReact", "name": "element", "type": "let element: (\n  ~?key: option(string),\n  ~?ref: option(Js.nullable(reactRef) => unit),\n  component('state, 'retainedProps, 'action)\n) => reactElement", "docs": null, "kind": "value", "args": [["key", "string (optional)"], ["ref", "Js.nullable(reactRef) => unit (optional)"], ["", "component('state, 'retainedProps, 'action)"]]}, {"path": "ReasonReact", "name": "jsPropsToReason", "type": "type jsPropsToReason('jsProps, 'state, 'retainedProps, 'action) = Js.t('jsProps) => component(\n  'state,\n  'retainedProps,\n  'action\n)", "docs": null, "kind": "type"}, {"path": "ReasonReact", "name": "wrapReasonForJs", "type": "let wrapReasonForJs: (\n  ~component: componentSpec('state, 'initialState, 'retainedProps, 'initialRetainedProps, 'action),\n  jsPropsToReason('a, 'a, 'a, 'a)\n) => reactClass", "docs": "<ul><li>We <em>under</em> constrain the kind of component spec this accepts because we actually extend the <em>originally</em>\ndefined component. It uses mutation on the original component, so that even if it is extended with\n{...component}, all extensions will also see the underlying js class. I can sleep at night because js\ninterop is integrating with untyped, code and it is <em>possible</em> to create pure-ReasonReact apps without JS\ninterop entirely. </li></ul>", "kind": "value", "args": [["component", "componentSpec('state, 'initialState, 'retainedProps, 'initialRetainedProps, 'action)"], ["", "jsPropsToReason('a, 'a, 'a, 'a)"]]}, {"path": "ReasonReact", "name": "createDomElement", "type": "let createDomElement: (string, ~props: Js.t(&lt; .. &gt;), array(reactElement)) => reactElement", "docs": null, "kind": "value", "args": [["", "string"], ["props", "Js.t(&lt; .. &gt;)"], ["", "array(reactElement)"]]}, {"path": "ReasonReact", "name": "wrapJsForReason", "type": "let wrapJsForReason: (~reactClass: reactClass, ~props: Js.t(&lt; .. &gt;), 'a) => component(\n  stateless,\n  noRetainedProps,\n  actionless\n)", "docs": "<ul><li>Wrap props into a JS component\nUse for interop when Reason components use JS components</li></ul>", "kind": "value", "args": [["reactClass", "reactClass"], ["props", "Js.t(&lt; .. &gt;)"], ["", "'a"]]}, {"path": "ReasonReact.Router", "name": "push", "type": "let push: string => unit", "docs": "<p> update the url with the string path. Example: <code>push(&quot;/book/1&quot;)</code>, <code>push(&quot;/books#title&quot;)</code></p>\n", "kind": "value", "args": [["", "string"]]}, {"path": "ReasonReact.Router", "name": "watcherID", "type": "type watcherID", "docs": null, "kind": "type"}, {"path": "ReasonReact.Router", "name": "url", "type": "type url = {path: list(string), hash: string, search: string}", "docs": null, "kind": "type"}, {"path": "ReasonReact.Router", "name": "watchUrl", "type": "let watchUrl: url => unit => watcherID", "docs": "<p> start watching for URL changes. Returns a subscription token. Upon url change, calls the callback and passes it the url record</p>\n", "kind": "value", "args": [["", "url => unit"]]}, {"path": "ReasonReact.Router", "name": "unwatchUrl", "type": "let unwatchUrl: watcherID => unit", "docs": "<p> stop watching for URL changes</p>\n", "kind": "value", "args": [["", "watcherID"]]}, {"path": "ReasonReact.Router", "name": "dangerouslyGetInitialUrl", "type": "let dangerouslyGetInitialUrl: unit => url", "docs": "<p>this is marked as &quot;dangerous&quot; because you technically shouldn&#39;t be accessing the URL outside of watchUrl&#39;s callback;\nyou&#39;d read a potentially stale url, instead of the fresh one inside watchUrl.</p>\n<p>But this helper is sometimes needed, if you&#39;d like to initialize a page whose display/state depends on the URL,\ninstead of reading from it in watchUrl&#39;s callback, which you&#39;d probably have put inside didMount (aka too late,\nthe page&#39;s already rendered).</p>\n<p>So, the correct (and idiomatic) usage of this helper is to only use it in a component that&#39;s also subscribed to\nwatchUrl. Please see https://github.com/reasonml-community/reason-react-example/blob/master/src/todomvc/TodoItem.re\nfor an example.</p>\n", "kind": "value", "args": [["", "unit"]]}, {"path": "ReasonReact", "name": "Router", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>dangerouslyGetInitialUrl\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>push\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unwatchUrl\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>watchUrl\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>url\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>watcherID", "docs": null, "kind": "module"}, {"path": "", "name": "ReasonReact", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>arrayToElement\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cloneElement\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>createDomElement\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>createElement\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>element\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>nullElement\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>reducerComponent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>reducerComponentWithRetainedProps\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>refToJsObj\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>statelessComponent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>statelessComponentWithRetainedProps\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stringToElement\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>wrapJsForReason\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>wrapReasonForJs\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>actionless\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>component\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>componentSpec\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>jsElementWrapped\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>jsPropsToReason\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>noRetainedProps\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>oldNewSelf\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reactClass\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reactClassInternal\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reactElement\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reactRef\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reduce\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>renderNotImplemented\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>self\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>stateless\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>subscription\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>update\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Callback\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Router", "docs": null, "kind": "module"}, {"path": "ReactEventRe", "name": "synthetic", "type": "type synthetic('a)", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Synthetic", "name": "tag", "type": "type tag", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Synthetic", "name": "t", "type": "type t = synthetic(tag)", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Synthetic", "name": "bubbles", "type": "let bubbles: synthetic('a) => bool", "docs": null, "kind": "value", "args": [["", "synthetic('a)"]]}, {"path": "ReactEventRe.Synthetic", "name": "cancelable", "type": "let cancelable: synthetic('a) => bool", "docs": null, "kind": "value", "args": [["", "synthetic('a)"]]}, {"path": "ReactEventRe.Synthetic", "name": "currentTarget", "type": "let currentTarget: synthetic('a) => Dom.element", "docs": null, "kind": "value", "args": [["", "synthetic('a)"]]}, {"path": "ReactEventRe.Synthetic", "name": "defaultPrevented", "type": "let defaultPrevented: synthetic('a) => bool", "docs": null, "kind": "value", "args": [["", "synthetic('a)"]]}, {"path": "ReactEventRe.Synthetic", "name": "eventPhase", "type": "let eventPhase: synthetic('a) => int", "docs": null, "kind": "value", "args": [["", "synthetic('a)"]]}, {"path": "ReactEventRe.Synthetic", "name": "isTrusted", "type": "let isTrusted: synthetic('a) => bool", "docs": null, "kind": "value", "args": [["", "synthetic('a)"]]}, {"path": "ReactEventRe.Synthetic", "name": "nativeEvent", "type": "let nativeEvent: synthetic('a) => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "synthetic('a)"]]}, {"path": "ReactEventRe.Synthetic", "name": "preventDefault", "type": "let preventDefault: synthetic('a) => unit", "docs": null, "kind": "value", "args": [["", "synthetic('a)"]]}, {"path": "ReactEventRe.Synthetic", "name": "isDefaultPrevented", "type": "let isDefaultPrevented: synthetic('a) => bool", "docs": null, "kind": "value", "args": [["", "synthetic('a)"]]}, {"path": "ReactEventRe.Synthetic", "name": "stopPropagation", "type": "let stopPropagation: synthetic('a) => unit", "docs": null, "kind": "value", "args": [["", "synthetic('a)"]]}, {"path": "ReactEventRe.Synthetic", "name": "isPropagationStopped", "type": "let isPropagationStopped: synthetic('a) => bool", "docs": null, "kind": "value", "args": [["", "synthetic('a)"]]}, {"path": "ReactEventRe.Synthetic", "name": "target", "type": "let target: synthetic('a) => Dom.element", "docs": null, "kind": "value", "args": [["", "synthetic('a)"]]}, {"path": "ReactEventRe.Synthetic", "name": "timeStamp", "type": "let timeStamp: synthetic('a) => float", "docs": null, "kind": "value", "args": [["", "synthetic('a)"]]}, {"path": "ReactEventRe.Synthetic", "name": "_type", "type": "let _type: synthetic('a) => string", "docs": null, "kind": "value", "args": [["", "synthetic('a)"]]}, {"path": "ReactEventRe.Synthetic", "name": "persist", "type": "let persist: synthetic('a) => unit", "docs": null, "kind": "value", "args": [["", "synthetic('a)"]]}, {"path": "ReactEventRe", "name": "Synthetic", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bubbles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cancelable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>currentTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eventPhase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDefaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isPropagationStopped\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isTrusted\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>nativeEvent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>persist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>preventDefault\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stopPropagation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>target\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>timeStamp\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "ReactEventRe", "name": "toSyntheticEvent", "type": "let toSyntheticEvent: synthetic('a) => Synthetic.t", "docs": null, "kind": "value", "args": [["", "synthetic('a)"]]}, {"path": "ReactEventRe.Clipboard", "name": "tag", "type": "type tag", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Clipboard", "name": "t", "type": "type t = synthetic(tag)", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Clipboard", "name": "bubbles", "type": "let bubbles: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Clipboard", "name": "cancelable", "type": "let cancelable: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Clipboard", "name": "currentTarget", "type": "let currentTarget: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Clipboard", "name": "defaultPrevented", "type": "let defaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Clipboard", "name": "eventPhase", "type": "let eventPhase: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Clipboard", "name": "isTrusted", "type": "let isTrusted: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Clipboard", "name": "nativeEvent", "type": "let nativeEvent: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Clipboard", "name": "preventDefault", "type": "let preventDefault: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Clipboard", "name": "isDefaultPrevented", "type": "let isDefaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Clipboard", "name": "stopPropagation", "type": "let stopPropagation: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Clipboard", "name": "isPropagationStopped", "type": "let isPropagationStopped: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Clipboard", "name": "target", "type": "let target: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Clipboard", "name": "timeStamp", "type": "let timeStamp: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Clipboard", "name": "_type", "type": "let _type: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Clipboard", "name": "persist", "type": "let persist: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Clipboard", "name": "clipboardData", "type": "let clipboardData: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe", "name": "Clipboard", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bubbles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cancelable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>clipboardData\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>currentTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eventPhase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDefaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isPropagationStopped\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isTrusted\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>nativeEvent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>persist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>preventDefault\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stopPropagation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>target\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>timeStamp\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "ReactEventRe.Composition", "name": "tag", "type": "type tag", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Composition", "name": "t", "type": "type t = synthetic(tag)", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Composition", "name": "bubbles", "type": "let bubbles: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Composition", "name": "cancelable", "type": "let cancelable: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Composition", "name": "currentTarget", "type": "let currentTarget: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Composition", "name": "defaultPrevented", "type": "let defaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Composition", "name": "eventPhase", "type": "let eventPhase: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Composition", "name": "isTrusted", "type": "let isTrusted: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Composition", "name": "nativeEvent", "type": "let nativeEvent: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Composition", "name": "preventDefault", "type": "let preventDefault: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Composition", "name": "isDefaultPrevented", "type": "let isDefaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Composition", "name": "stopPropagation", "type": "let stopPropagation: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Composition", "name": "isPropagationStopped", "type": "let isPropagationStopped: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Composition", "name": "target", "type": "let target: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Composition", "name": "timeStamp", "type": "let timeStamp: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Composition", "name": "_type", "type": "let _type: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Composition", "name": "persist", "type": "let persist: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Composition", "name": "data", "type": "let data: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe", "name": "Composition", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bubbles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cancelable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>currentTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>data\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eventPhase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDefaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isPropagationStopped\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isTrusted\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>nativeEvent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>persist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>preventDefault\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stopPropagation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>target\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>timeStamp\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "ReactEventRe.Keyboard", "name": "tag", "type": "type tag", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Keyboard", "name": "t", "type": "type t = synthetic(tag)", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Keyboard", "name": "bubbles", "type": "let bubbles: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "cancelable", "type": "let cancelable: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "currentTarget", "type": "let currentTarget: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "defaultPrevented", "type": "let defaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "eventPhase", "type": "let eventPhase: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "isTrusted", "type": "let isTrusted: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "nativeEvent", "type": "let nativeEvent: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "preventDefault", "type": "let preventDefault: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "isDefaultPrevented", "type": "let isDefaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "stopPropagation", "type": "let stopPropagation: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "isPropagationStopped", "type": "let isPropagationStopped: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "target", "type": "let target: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "timeStamp", "type": "let timeStamp: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "_type", "type": "let _type: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "persist", "type": "let persist: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "altKey", "type": "let altKey: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "charCode", "type": "let charCode: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "ctrlKey", "type": "let ctrlKey: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "getModifierState", "type": "let getModifierState: (string, t) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "key", "type": "let key: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "keyCode", "type": "let keyCode: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "locale", "type": "let locale: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "location", "type": "let location: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "metaKey", "type": "let metaKey: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "repeat", "type": "let repeat: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "shiftKey", "type": "let shiftKey: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Keyboard", "name": "which", "type": "let which: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe", "name": "Keyboard", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>altKey\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bubbles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cancelable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>charCode\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ctrlKey\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>currentTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eventPhase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getModifierState\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDefaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isPropagationStopped\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isTrusted\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>key\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>keyCode\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>locale\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>location\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>metaKey\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>nativeEvent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>persist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>preventDefault\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>repeat\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>shiftKey\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stopPropagation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>target\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>timeStamp\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>which\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "ReactEventRe.Focus", "name": "tag", "type": "type tag", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Focus", "name": "t", "type": "type t = synthetic(tag)", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Focus", "name": "bubbles", "type": "let bubbles: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Focus", "name": "cancelable", "type": "let cancelable: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Focus", "name": "currentTarget", "type": "let currentTarget: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Focus", "name": "defaultPrevented", "type": "let defaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Focus", "name": "eventPhase", "type": "let eventPhase: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Focus", "name": "isTrusted", "type": "let isTrusted: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Focus", "name": "nativeEvent", "type": "let nativeEvent: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Focus", "name": "preventDefault", "type": "let preventDefault: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Focus", "name": "isDefaultPrevented", "type": "let isDefaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Focus", "name": "stopPropagation", "type": "let stopPropagation: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Focus", "name": "isPropagationStopped", "type": "let isPropagationStopped: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Focus", "name": "target", "type": "let target: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Focus", "name": "timeStamp", "type": "let timeStamp: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Focus", "name": "_type", "type": "let _type: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Focus", "name": "persist", "type": "let persist: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Focus", "name": "relatedTarget", "type": "let relatedTarget: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe", "name": "Focus", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bubbles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cancelable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>currentTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eventPhase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDefaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isPropagationStopped\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isTrusted\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>nativeEvent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>persist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>preventDefault\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>relatedTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stopPropagation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>target\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>timeStamp\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "ReactEventRe.Form", "name": "tag", "type": "type tag", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Form", "name": "t", "type": "type t = synthetic(tag)", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Form", "name": "bubbles", "type": "let bubbles: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Form", "name": "cancelable", "type": "let cancelable: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Form", "name": "currentTarget", "type": "let currentTarget: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Form", "name": "defaultPrevented", "type": "let defaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Form", "name": "eventPhase", "type": "let eventPhase: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Form", "name": "isTrusted", "type": "let isTrusted: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Form", "name": "nativeEvent", "type": "let nativeEvent: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Form", "name": "preventDefault", "type": "let preventDefault: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Form", "name": "isDefaultPrevented", "type": "let isDefaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Form", "name": "stopPropagation", "type": "let stopPropagation: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Form", "name": "isPropagationStopped", "type": "let isPropagationStopped: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Form", "name": "target", "type": "let target: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Form", "name": "timeStamp", "type": "let timeStamp: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Form", "name": "_type", "type": "let _type: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Form", "name": "persist", "type": "let persist: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe", "name": "Form", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bubbles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cancelable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>currentTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eventPhase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDefaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isPropagationStopped\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isTrusted\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>nativeEvent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>persist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>preventDefault\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stopPropagation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>target\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>timeStamp\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "ReactEventRe.Mouse", "name": "tag", "type": "type tag", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Mouse", "name": "t", "type": "type t = synthetic(tag)", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Mouse", "name": "bubbles", "type": "let bubbles: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "cancelable", "type": "let cancelable: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "currentTarget", "type": "let currentTarget: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "defaultPrevented", "type": "let defaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "eventPhase", "type": "let eventPhase: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "isTrusted", "type": "let isTrusted: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "nativeEvent", "type": "let nativeEvent: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "preventDefault", "type": "let preventDefault: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "isDefaultPrevented", "type": "let isDefaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "stopPropagation", "type": "let stopPropagation: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "isPropagationStopped", "type": "let isPropagationStopped: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "target", "type": "let target: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "timeStamp", "type": "let timeStamp: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "_type", "type": "let _type: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "persist", "type": "let persist: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "altKey", "type": "let altKey: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "button", "type": "let button: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "buttons", "type": "let buttons: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "clientX", "type": "let clientX: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "clientY", "type": "let clientY: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "ctrlKey", "type": "let ctrlKey: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "getModifierState", "type": "let getModifierState: (string, t) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "metaKey", "type": "let metaKey: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "pageX", "type": "let pageX: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "pageY", "type": "let pageY: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "relatedTarget", "type": "let relatedTarget: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "screenX", "type": "let screenX: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "screenY", "type": "let screenY: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Mouse", "name": "shiftKey", "type": "let shiftKey: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe", "name": "Mouse", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>altKey\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bubbles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>button\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>buttons\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cancelable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>clientX\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>clientY\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ctrlKey\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>currentTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eventPhase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getModifierState\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDefaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isPropagationStopped\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isTrusted\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>metaKey\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>nativeEvent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>pageX\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>pageY\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>persist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>preventDefault\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>relatedTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>screenX\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>screenY\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>shiftKey\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stopPropagation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>target\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>timeStamp\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "ReactEventRe.Selection", "name": "tag", "type": "type tag", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Selection", "name": "t", "type": "type t = synthetic(tag)", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Selection", "name": "bubbles", "type": "let bubbles: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Selection", "name": "cancelable", "type": "let cancelable: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Selection", "name": "currentTarget", "type": "let currentTarget: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Selection", "name": "defaultPrevented", "type": "let defaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Selection", "name": "eventPhase", "type": "let eventPhase: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Selection", "name": "isTrusted", "type": "let isTrusted: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Selection", "name": "nativeEvent", "type": "let nativeEvent: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Selection", "name": "preventDefault", "type": "let preventDefault: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Selection", "name": "isDefaultPrevented", "type": "let isDefaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Selection", "name": "stopPropagation", "type": "let stopPropagation: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Selection", "name": "isPropagationStopped", "type": "let isPropagationStopped: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Selection", "name": "target", "type": "let target: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Selection", "name": "timeStamp", "type": "let timeStamp: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Selection", "name": "_type", "type": "let _type: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Selection", "name": "persist", "type": "let persist: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe", "name": "Selection", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bubbles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cancelable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>currentTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eventPhase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDefaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isPropagationStopped\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isTrusted\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>nativeEvent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>persist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>preventDefault\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stopPropagation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>target\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>timeStamp\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "ReactEventRe.Touch", "name": "tag", "type": "type tag", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Touch", "name": "t", "type": "type t = synthetic(tag)", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Touch", "name": "bubbles", "type": "let bubbles: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "cancelable", "type": "let cancelable: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "currentTarget", "type": "let currentTarget: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "defaultPrevented", "type": "let defaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "eventPhase", "type": "let eventPhase: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "isTrusted", "type": "let isTrusted: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "nativeEvent", "type": "let nativeEvent: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "preventDefault", "type": "let preventDefault: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "isDefaultPrevented", "type": "let isDefaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "stopPropagation", "type": "let stopPropagation: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "isPropagationStopped", "type": "let isPropagationStopped: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "target", "type": "let target: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "timeStamp", "type": "let timeStamp: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "_type", "type": "let _type: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "persist", "type": "let persist: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "altKey", "type": "let altKey: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "changedTouches", "type": "let changedTouches: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "ctrlKey", "type": "let ctrlKey: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "getModifierState", "type": "let getModifierState: (string, t) => bool", "docs": null, "kind": "value", "args": [["", "string"], ["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "metaKey", "type": "let metaKey: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "shiftKey", "type": "let shiftKey: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "targetTouches", "type": "let targetTouches: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Touch", "name": "touches", "type": "let touches: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe", "name": "Touch", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>altKey\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bubbles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cancelable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>changedTouches\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>ctrlKey\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>currentTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eventPhase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>getModifierState\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDefaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isPropagationStopped\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isTrusted\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>metaKey\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>nativeEvent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>persist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>preventDefault\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>shiftKey\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stopPropagation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>target\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>targetTouches\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>timeStamp\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>touches\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "ReactEventRe.UI", "name": "tag", "type": "type tag", "docs": null, "kind": "type"}, {"path": "ReactEventRe.UI", "name": "t", "type": "type t = synthetic(tag)", "docs": null, "kind": "type"}, {"path": "ReactEventRe.UI", "name": "bubbles", "type": "let bubbles: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.UI", "name": "cancelable", "type": "let cancelable: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.UI", "name": "currentTarget", "type": "let currentTarget: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.UI", "name": "defaultPrevented", "type": "let defaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.UI", "name": "eventPhase", "type": "let eventPhase: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.UI", "name": "isTrusted", "type": "let isTrusted: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.UI", "name": "nativeEvent", "type": "let nativeEvent: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.UI", "name": "preventDefault", "type": "let preventDefault: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.UI", "name": "isDefaultPrevented", "type": "let isDefaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.UI", "name": "stopPropagation", "type": "let stopPropagation: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.UI", "name": "isPropagationStopped", "type": "let isPropagationStopped: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.UI", "name": "target", "type": "let target: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.UI", "name": "timeStamp", "type": "let timeStamp: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.UI", "name": "_type", "type": "let _type: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.UI", "name": "persist", "type": "let persist: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.UI", "name": "detail", "type": "let detail: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.UI", "name": "view", "type": "let view: t => Dom.window", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe", "name": "UI", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bubbles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cancelable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>currentTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>detail\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eventPhase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDefaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isPropagationStopped\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isTrusted\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>nativeEvent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>persist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>preventDefault\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stopPropagation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>target\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>timeStamp\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>view\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "ReactEventRe.Wheel", "name": "tag", "type": "type tag", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Wheel", "name": "t", "type": "type t = synthetic(tag)", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Wheel", "name": "bubbles", "type": "let bubbles: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "cancelable", "type": "let cancelable: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "currentTarget", "type": "let currentTarget: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "defaultPrevented", "type": "let defaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "eventPhase", "type": "let eventPhase: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "isTrusted", "type": "let isTrusted: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "nativeEvent", "type": "let nativeEvent: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "preventDefault", "type": "let preventDefault: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "isDefaultPrevented", "type": "let isDefaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "stopPropagation", "type": "let stopPropagation: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "isPropagationStopped", "type": "let isPropagationStopped: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "target", "type": "let target: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "timeStamp", "type": "let timeStamp: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "_type", "type": "let _type: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "persist", "type": "let persist: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "deltaMode", "type": "let deltaMode: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "deltaX", "type": "let deltaX: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "deltaY", "type": "let deltaY: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Wheel", "name": "deltaZ", "type": "let deltaZ: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe", "name": "Wheel", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bubbles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cancelable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>currentTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>deltaMode\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>deltaX\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>deltaY\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>deltaZ\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eventPhase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDefaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isPropagationStopped\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isTrusted\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>nativeEvent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>persist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>preventDefault\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stopPropagation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>target\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>timeStamp\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "ReactEventRe.Media", "name": "tag", "type": "type tag", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Media", "name": "t", "type": "type t = synthetic(tag)", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Media", "name": "bubbles", "type": "let bubbles: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Media", "name": "cancelable", "type": "let cancelable: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Media", "name": "currentTarget", "type": "let currentTarget: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Media", "name": "defaultPrevented", "type": "let defaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Media", "name": "eventPhase", "type": "let eventPhase: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Media", "name": "isTrusted", "type": "let isTrusted: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Media", "name": "nativeEvent", "type": "let nativeEvent: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Media", "name": "preventDefault", "type": "let preventDefault: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Media", "name": "isDefaultPrevented", "type": "let isDefaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Media", "name": "stopPropagation", "type": "let stopPropagation: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Media", "name": "isPropagationStopped", "type": "let isPropagationStopped: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Media", "name": "target", "type": "let target: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Media", "name": "timeStamp", "type": "let timeStamp: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Media", "name": "_type", "type": "let _type: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Media", "name": "persist", "type": "let persist: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe", "name": "Media", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bubbles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cancelable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>currentTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eventPhase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDefaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isPropagationStopped\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isTrusted\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>nativeEvent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>persist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>preventDefault\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stopPropagation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>target\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>timeStamp\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "ReactEventRe.Image", "name": "tag", "type": "type tag", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Image", "name": "t", "type": "type t = synthetic(tag)", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Image", "name": "bubbles", "type": "let bubbles: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Image", "name": "cancelable", "type": "let cancelable: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Image", "name": "currentTarget", "type": "let currentTarget: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Image", "name": "defaultPrevented", "type": "let defaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Image", "name": "eventPhase", "type": "let eventPhase: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Image", "name": "isTrusted", "type": "let isTrusted: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Image", "name": "nativeEvent", "type": "let nativeEvent: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Image", "name": "preventDefault", "type": "let preventDefault: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Image", "name": "isDefaultPrevented", "type": "let isDefaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Image", "name": "stopPropagation", "type": "let stopPropagation: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Image", "name": "isPropagationStopped", "type": "let isPropagationStopped: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Image", "name": "target", "type": "let target: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Image", "name": "timeStamp", "type": "let timeStamp: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Image", "name": "_type", "type": "let _type: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Image", "name": "persist", "type": "let persist: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe", "name": "Image", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bubbles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cancelable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>currentTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eventPhase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDefaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isPropagationStopped\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isTrusted\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>nativeEvent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>persist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>preventDefault\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stopPropagation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>target\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>timeStamp\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "ReactEventRe.Animation", "name": "tag", "type": "type tag", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Animation", "name": "t", "type": "type t = synthetic(tag)", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Animation", "name": "bubbles", "type": "let bubbles: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "cancelable", "type": "let cancelable: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "currentTarget", "type": "let currentTarget: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "defaultPrevented", "type": "let defaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "eventPhase", "type": "let eventPhase: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "isTrusted", "type": "let isTrusted: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "nativeEvent", "type": "let nativeEvent: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "preventDefault", "type": "let preventDefault: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "isDefaultPrevented", "type": "let isDefaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "stopPropagation", "type": "let stopPropagation: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "isPropagationStopped", "type": "let isPropagationStopped: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "target", "type": "let target: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "timeStamp", "type": "let timeStamp: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "_type", "type": "let _type: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "persist", "type": "let persist: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "animationName", "type": "let animationName: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "pseudoElement", "type": "let pseudoElement: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Animation", "name": "elapsedTime", "type": "let elapsedTime: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe", "name": "Animation", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>animationName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bubbles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cancelable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>currentTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>elapsedTime\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eventPhase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDefaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isPropagationStopped\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isTrusted\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>nativeEvent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>persist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>preventDefault\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>pseudoElement\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stopPropagation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>target\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>timeStamp\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "ReactEventRe.Transition", "name": "tag", "type": "type tag", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Transition", "name": "t", "type": "type t = synthetic(tag)", "docs": null, "kind": "type"}, {"path": "ReactEventRe.Transition", "name": "bubbles", "type": "let bubbles: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "cancelable", "type": "let cancelable: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "currentTarget", "type": "let currentTarget: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "defaultPrevented", "type": "let defaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "eventPhase", "type": "let eventPhase: t => int", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "isTrusted", "type": "let isTrusted: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "nativeEvent", "type": "let nativeEvent: t => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "preventDefault", "type": "let preventDefault: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "isDefaultPrevented", "type": "let isDefaultPrevented: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "stopPropagation", "type": "let stopPropagation: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "isPropagationStopped", "type": "let isPropagationStopped: t => bool", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "target", "type": "let target: t => Dom.element", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "timeStamp", "type": "let timeStamp: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "_type", "type": "let _type: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "persist", "type": "let persist: t => unit", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "propertyName", "type": "let propertyName: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "pseudoElement", "type": "let pseudoElement: t => string", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe.Transition", "name": "elapsedTime", "type": "let elapsedTime: t => float", "docs": null, "kind": "value", "args": [["", "t"]]}, {"path": "ReactEventRe", "name": "Transition", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_type\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>bubbles\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>cancelable\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>currentTarget\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>defaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>elapsedTime\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>eventPhase\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isDefaultPrevented\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isPropagationStopped\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>isTrusted\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>nativeEvent\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>persist\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>preventDefault\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>propertyName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>pseudoElement\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>stopPropagation\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>target\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>timeStamp\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>tag", "docs": null, "kind": "module"}, {"path": "", "name": "ReactEventRe", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>toSyntheticEvent\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>synthetic\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Animation\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Clipboard\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Composition\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Focus\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Form\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Image\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Keyboard\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Media\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Mouse\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Selection\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Synthetic\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Touch\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Transition\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>UI\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Wheel", "docs": null, "kind": "module"}, {"path": "ReactDOMServerRe", "name": "renderToString", "type": "let renderToString: ReasonReact.reactElement => string", "docs": null, "kind": "value", "args": [["", "ReasonReact.reactElement"]]}, {"path": "ReactDOMServerRe", "name": "renderToStaticMarkup", "type": "let renderToStaticMarkup: ReasonReact.reactElement => string", "docs": null, "kind": "value", "args": [["", "ReasonReact.reactElement"]]}, {"path": "", "name": "ReactDOMServerRe", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>renderToStaticMarkup\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>renderToString", "docs": null, "kind": "module"}, {"path": "ReactDOMRe", "name": "render", "type": "let render: (ReasonReact.reactElement, Dom.element) => unit", "docs": null, "kind": "value", "args": [["", "ReasonReact.reactElement"], ["", "Dom.element"]]}, {"path": "ReactDOMRe", "name": "_getElementsByClassName", "type": "let _getElementsByClassName: string => array(Dom.element)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "ReactDOMRe", "name": "_getElementById", "type": "let _getElementById: string => option(Dom.element)", "docs": null, "kind": "value", "args": [["", "string"]]}, {"path": "ReactDOMRe", "name": "renderToElementWithClassName", "type": "let renderToElementWithClassName: (ReasonReact.reactElement, string) => unit", "docs": null, "kind": "value", "args": [["", "ReasonReact.reactElement"], ["", "string"]]}, {"path": "ReactDOMRe", "name": "renderToElementWithId", "type": "let renderToElementWithId: (ReasonReact.reactElement, string) => unit", "docs": null, "kind": "value", "args": [["", "ReasonReact.reactElement"], ["", "string"]]}, {"path": "ReactDOMRe", "name": "hydrate", "type": "let hydrate: (ReasonReact.reactElement, Dom.element) => unit", "docs": null, "kind": "value", "args": [["", "ReasonReact.reactElement"], ["", "Dom.element"]]}, {"path": "ReactDOMRe", "name": "hydrateToElementWithClassName", "type": "let hydrateToElementWithClassName: (ReasonReact.reactElement, string) => unit", "docs": null, "kind": "value", "args": [["", "ReasonReact.reactElement"], ["", "string"]]}, {"path": "ReactDOMRe", "name": "hydrateToElementWithId", "type": "let hydrateToElementWithId: (ReasonReact.reactElement, string) => unit", "docs": null, "kind": "value", "args": [["", "ReasonReact.reactElement"], ["", "string"]]}, {"path": "ReactDOMRe", "name": "createPortal", "type": "let createPortal: (ReasonReact.reactElement, Dom.element) => ReasonReact.reactElement", "docs": null, "kind": "value", "args": [["", "ReasonReact.reactElement"], ["", "Dom.element"]]}, {"path": "ReactDOMRe", "name": "unmountComponentAtNode", "type": "let unmountComponentAtNode: Dom.element => unit", "docs": null, "kind": "value", "args": [["", "Dom.element"]]}, {"path": "ReactDOMRe", "name": "findDOMNode", "type": "let findDOMNode: ReasonReact.reactRef => Dom.element", "docs": null, "kind": "value", "args": [["", "ReasonReact.reactRef"]]}, {"path": "ReactDOMRe", "name": "domElementToObj", "type": "let domElementToObj: Dom.element => Js.t(&lt; .. &gt;)", "docs": null, "kind": "value", "args": [["", "Dom.element"]]}, {"path": "ReactDOMRe", "name": "reactDOMProps", "type": "type reactDOMProps", "docs": null, "kind": "type"}, {"path": "ReactDOMRe", "name": "objToDOMProps", "type": "let objToDOMProps: Js.t(&lt; .. &gt;) => reactDOMProps", "docs": null, "kind": "value", "args": [["", "Js.t(&lt; .. &gt;)"]]}, {"path": "ReactDOMRe", "name": "style", "type": "type style", "docs": null, "kind": "type"}, {"path": "ReactDOMRe", "name": "props", "type": "let props: (\n  ~?key: option(string),\n  ~?ref: option(Js.nullable(Dom.element) => unit),\n  ~?defaultChecked: option(Js.boolean),\n  ~?defaultValue: option(string),\n  ~?accessKey: option(string),\n  ~?className: option(string),\n  ~?contentEditable: option(Js.boolean),\n  ~?contextMenu: option(string),\n  ~?dir: option(string),\n  ~?draggable: option(Js.boolean),\n  ~?hidden: option(Js.boolean),\n  ~?id: option(string),\n  ~?lang: option(string),\n  ~?role: option(string),\n  ~?style: option(style),\n  ~?spellCheck: option(Js.boolean),\n  ~?tabIndex: option(int),\n  ~?title: option(string),\n  ~?itemID: option(string),\n  ~?itemProp: option(string),\n  ~?itemRef: option(string),\n  ~?itemScope: option(Js.boolean),\n  ~?itemType: option(string),\n  ~?accept: option(string),\n  ~?acceptCharset: option(string),\n  ~?action: option(string),\n  ~?allowFullScreen: option(Js.boolean),\n  ~?alt: option(string),\n  ~?async: option(Js.boolean),\n  ~?autoComplete: option(string),\n  ~?autoFocus: option(Js.boolean),\n  ~?autoPlay: option(Js.boolean),\n  ~?challenge: option(string),\n  ~?charSet: option(string),\n  ~?checked: option(Js.boolean),\n  ~?cite: option(string),\n  ~?crossorigin: option(Js.boolean),\n  ~?cols: option(int),\n  ~?colSpan: option(int),\n  ~?content: option(string),\n  ~?controls: option(Js.boolean),\n  ~?coords: option(string),\n  ~?data: option(string),\n  ~?dateTime: option(string),\n  ~?default: option(Js.boolean),\n  ~?defer: option(Js.boolean),\n  ~?disabled: option(Js.boolean),\n  ~?download: option(string),\n  ~?encType: option(string),\n  ~?form: option(string),\n  ~?formAction: option(string),\n  ~?formTarget: option(string),\n  ~?formMethod: option(string),\n  ~?headers: option(string),\n  ~?height: option(string),\n  ~?high: option(int),\n  ~?href: option(string),\n  ~?hrefLang: option(string),\n  ~?htmlFor: option(string),\n  ~?httpEquiv: option(string),\n  ~?icon: option(string),\n  ~?inputMode: option(string),\n  ~?integrity: option(string),\n  ~?keyType: option(string),\n  ~?kind: option(string),\n  ~?label: option(string),\n  ~?list: option(string),\n  ~?loop: option(Js.boolean),\n  ~?low: option(int),\n  ~?manifest: option(string),\n  ~?max: option(string),\n  ~?maxLength: option(int),\n  ~?media: option(string),\n  ~?mediaGroup: option(string),\n  ~?method: option(string),\n  ~?min: option(int),\n  ~?minLength: option(int),\n  ~?multiple: option(Js.boolean),\n  ~?muted: option(Js.boolean),\n  ~?name: option(string),\n  ~?nonce: option(string),\n  ~?noValidate: option(Js.boolean),\n  ~?_open: option(Js.boolean),\n  ~?optimum: option(int),\n  ~?pattern: option(string),\n  ~?placeholder: option(string),\n  ~?poster: option(string),\n  ~?preload: option(string),\n  ~?radioGroup: option(string),\n  ~?readOnly: option(Js.boolean),\n  ~?rel: option(string),\n  ~?required: option(Js.boolean),\n  ~?reversed: option(Js.boolean),\n  ~?rows: option(int),\n  ~?rowSpan: option(int),\n  ~?sandbox: option(string),\n  ~?scope: option(string),\n  ~?scoped: option(Js.boolean),\n  ~?scrolling: option(string),\n  ~?selected: option(Js.boolean),\n  ~?shape: option(string),\n  ~?size: option(int),\n  ~?sizes: option(string),\n  ~?span: option(int),\n  ~?src: option(string),\n  ~?srcDoc: option(string),\n  ~?srcLang: option(string),\n  ~?srcSet: option(string),\n  ~?start: option(int),\n  ~?step: option(float),\n  ~?summary: option(string),\n  ~?target: option(string),\n  ~?_type: option(string),\n  ~?useMap: option(string),\n  ~?value: option(string),\n  ~?width: option(string),\n  ~?wrap: option(string),\n  ~?onCopy: option(ReactEventRe.Clipboard.t => unit),\n  ~?onCut: option(ReactEventRe.Clipboard.t => unit),\n  ~?onPaste: option(ReactEventRe.Clipboard.t => unit),\n  ~?onCompositionEnd: option(ReactEventRe.Composition.t => unit),\n  ~?onCompositionStart: option(ReactEventRe.Composition.t => unit),\n  ~?onCompositionUpdate: option(ReactEventRe.Composition.t => unit),\n  ~?onKeyDown: option(ReactEventRe.Keyboard.t => unit),\n  ~?onKeyPress: option(ReactEventRe.Keyboard.t => unit),\n  ~?onKeyUp: option(ReactEventRe.Keyboard.t => unit),\n  ~?onFocus: option(ReactEventRe.Focus.t => unit),\n  ~?onBlur: option(ReactEventRe.Focus.t => unit),\n  ~?onChange: option(ReactEventRe.Form.t => unit),\n  ~?onInput: option(ReactEventRe.Form.t => unit),\n  ~?onSubmit: option(ReactEventRe.Form.t => unit),\n  ~?onClick: option(ReactEventRe.Mouse.t => unit),\n  ~?onContextMenu: option(ReactEventRe.Mouse.t => unit),\n  ~?onDoubleClick: option(ReactEventRe.Mouse.t => unit),\n  ~?onDrag: option(ReactEventRe.Mouse.t => unit),\n  ~?onDragEnd: option(ReactEventRe.Mouse.t => unit),\n  ~?onDragEnter: option(ReactEventRe.Mouse.t => unit),\n  ~?onDragExit: option(ReactEventRe.Mouse.t => unit),\n  ~?onDragLeave: option(ReactEventRe.Mouse.t => unit),\n  ~?onDragOver: option(ReactEventRe.Mouse.t => unit),\n  ~?onDragStart: option(ReactEventRe.Mouse.t => unit),\n  ~?onDrop: option(ReactEventRe.Mouse.t => unit),\n  ~?onMouseDown: option(ReactEventRe.Mouse.t => unit),\n  ~?onMouseEnter: option(ReactEventRe.Mouse.t => unit),\n  ~?onMouseLeave: option(ReactEventRe.Mouse.t => unit),\n  ~?onMouseMove: option(ReactEventRe.Mouse.t => unit),\n  ~?onMouseOut: option(ReactEventRe.Mouse.t => unit),\n  ~?onMouseOver: option(ReactEventRe.Mouse.t => unit),\n  ~?onMouseUp: option(ReactEventRe.Mouse.t => unit),\n  ~?onSelect: option(ReactEventRe.Selection.t => unit),\n  ~?onTouchCancel: option(ReactEventRe.Touch.t => unit),\n  ~?onTouchEnd: option(ReactEventRe.Touch.t => unit),\n  ~?onTouchMove: option(ReactEventRe.Touch.t => unit),\n  ~?onTouchStart: option(ReactEventRe.Touch.t => unit),\n  ~?onScroll: option(ReactEventRe.UI.t => unit),\n  ~?onWheel: option(ReactEventRe.Wheel.t => unit),\n  ~?onAbort: option(ReactEventRe.Media.t => unit),\n  ~?onCanPlay: option(ReactEventRe.Media.t => unit),\n  ~?onCanPlayThrough: option(ReactEventRe.Media.t => unit),\n  ~?onDurationChange: option(ReactEventRe.Media.t => unit),\n  ~?onEmptied: option(ReactEventRe.Media.t => unit),\n  ~?onEncrypetd: option(ReactEventRe.Media.t => unit),\n  ~?onEnded: option(ReactEventRe.Media.t => unit),\n  ~?onError: option(ReactEventRe.Media.t => unit),\n  ~?onLoadedData: option(ReactEventRe.Media.t => unit),\n  ~?onLoadedMetadata: option(ReactEventRe.Media.t => unit),\n  ~?onLoadStart: option(ReactEventRe.Media.t => unit),\n  ~?onPause: option(ReactEventRe.Media.t => unit),\n  ~?onPlay: option(ReactEventRe.Media.t => unit),\n  ~?onPlaying: option(ReactEventRe.Media.t => unit),\n  ~?onProgress: option(ReactEventRe.Media.t => unit),\n  ~?onRateChange: option(ReactEventRe.Media.t => unit),\n  ~?onSeeked: option(ReactEventRe.Media.t => unit),\n  ~?onSeeking: option(ReactEventRe.Media.t => unit),\n  ~?onStalled: option(ReactEventRe.Media.t => unit),\n  ~?onSuspend: option(ReactEventRe.Media.t => unit),\n  ~?onTimeUpdate: option(ReactEventRe.Media.t => unit),\n  ~?onVolumeChange: option(ReactEventRe.Media.t => unit),\n  ~?onWaiting: option(ReactEventRe.Media.t => unit),\n  ~?onLoad: option(ReactEventRe.Image.t => unit),\n  ~?onAnimationStart: option(ReactEventRe.Animation.t => unit),\n  ~?onAnimationEnd: option(ReactEventRe.Animation.t => unit),\n  ~?onAnimationIteration: option(ReactEventRe.Animation.t => unit),\n  ~?onTransitionEnd: option(ReactEventRe.Transition.t => unit),\n  ~?accentHeight: option(string),\n  ~?accumulate: option(string),\n  ~?additive: option(string),\n  ~?alignmentBaseline: option(string),\n  ~?allowReorder: option(string),\n  ~?alphabetic: option(string),\n  ~?amplitude: option(string),\n  ~?arabicForm: option(string),\n  ~?ascent: option(string),\n  ~?attributeName: option(string),\n  ~?attributeType: option(string),\n  ~?autoReverse: option(string),\n  ~?azimuth: option(string),\n  ~?baseFrequency: option(string),\n  ~?baseProfile: option(string),\n  ~?baselineShift: option(string),\n  ~?bbox: option(string),\n  ~?_begin: option(string),\n  ~?bias: option(string),\n  ~?by: option(string),\n  ~?calcMode: option(string),\n  ~?capHeight: option(string),\n  ~?clip: option(string),\n  ~?clipPath: option(string),\n  ~?clipPathUnits: option(string),\n  ~?clipRule: option(string),\n  ~?colorInterpolation: option(string),\n  ~?colorInterpolationFilters: option(string),\n  ~?colorProfile: option(string),\n  ~?colorRendering: option(string),\n  ~?contentScriptType: option(string),\n  ~?contentStyleType: option(string),\n  ~?cursor: option(string),\n  ~?cx: option(string),\n  ~?cy: option(string),\n  ~?d: option(string),\n  ~?decelerate: option(string),\n  ~?descent: option(string),\n  ~?diffuseConstant: option(string),\n  ~?direction: option(string),\n  ~?display: option(string),\n  ~?divisor: option(string),\n  ~?dominantBaseline: option(string),\n  ~?dur: option(string),\n  ~?dx: option(string),\n  ~?dy: option(string),\n  ~?edgeMode: option(string),\n  ~?elevation: option(string),\n  ~?enableBackground: option(string),\n  ~?_end: option(string),\n  ~?exponent: option(string),\n  ~?externalResourcesRequired: option(string),\n  ~?fill: option(string),\n  ~?fillOpacity: option(string),\n  ~?fillRule: option(string),\n  ~?filter: option(string),\n  ~?filterRes: option(string),\n  ~?filterUnits: option(string),\n  ~?floodColor: option(string),\n  ~?floodOpacity: option(string),\n  ~?focusable: option(string),\n  ~?fontFamily: option(string),\n  ~?fontSize: option(string),\n  ~?fontSizeAdjust: option(string),\n  ~?fontStretch: option(string),\n  ~?fontStyle: option(string),\n  ~?fontVariant: option(string),\n  ~?fontWeight: option(string),\n  ~?fomat: option(string),\n  ~?from: option(string),\n  ~?fx: option(string),\n  ~?fy: option(string),\n  ~?g1: option(string),\n  ~?g2: option(string),\n  ~?glyphName: option(string),\n  ~?glyphOrientationHorizontal: option(string),\n  ~?glyphOrientationVertical: option(string),\n  ~?glyphRef: option(string),\n  ~?gradientTransform: option(string),\n  ~?gradientUnits: option(string),\n  ~?hanging: option(string),\n  ~?horizAdvX: option(string),\n  ~?horizOriginX: option(string),\n  ~?ideographic: option(string),\n  ~?imageRendering: option(string),\n  ~?_in: option(string),\n  ~?in2: option(string),\n  ~?intercept: option(string),\n  ~?k: option(string),\n  ~?k1: option(string),\n  ~?k2: option(string),\n  ~?k3: option(string),\n  ~?k4: option(string),\n  ~?kernelMatrix: option(string),\n  ~?kernelUnitLength: option(string),\n  ~?kerning: option(string),\n  ~?keyPoints: option(string),\n  ~?keySplines: option(string),\n  ~?keyTimes: option(string),\n  ~?lengthAdjust: option(string),\n  ~?letterSpacing: option(string),\n  ~?lightingColor: option(string),\n  ~?limitingConeAngle: option(string),\n  ~?local: option(string),\n  ~?markerEnd: option(string),\n  ~?markerHeight: option(string),\n  ~?markerMid: option(string),\n  ~?markerStart: option(string),\n  ~?markerUnits: option(string),\n  ~?markerWidth: option(string),\n  ~?mask: option(string),\n  ~?maskContentUnits: option(string),\n  ~?maskUnits: option(string),\n  ~?mathematical: option(string),\n  ~?mode: option(string),\n  ~?numOctaves: option(string),\n  ~?offset: option(string),\n  ~?opacity: option(string),\n  ~?operator: option(string),\n  ~?order: option(string),\n  ~?orient: option(string),\n  ~?orientation: option(string),\n  ~?origin: option(string),\n  ~?overflow: option(string),\n  ~?overflowX: option(string),\n  ~?overflowY: option(string),\n  ~?overlinePosition: option(string),\n  ~?overlineThickness: option(string),\n  ~?paintOrder: option(string),\n  ~?panose1: option(string),\n  ~?pathLength: option(string),\n  ~?patternContentUnits: option(string),\n  ~?patternTransform: option(string),\n  ~?patternUnits: option(string),\n  ~?pointerEvents: option(string),\n  ~?points: option(string),\n  ~?pointsAtX: option(string),\n  ~?pointsAtY: option(string),\n  ~?pointsAtZ: option(string),\n  ~?preserveAlpha: option(string),\n  ~?preserveAspectRatio: option(string),\n  ~?primitiveUnits: option(string),\n  ~?r: option(string),\n  ~?radius: option(string),\n  ~?refX: option(string),\n  ~?refY: option(string),\n  ~?renderingIntent: option(string),\n  ~?repeatCount: option(string),\n  ~?repeatDur: option(string),\n  ~?requiredExtensions: option(string),\n  ~?requiredFeatures: option(string),\n  ~?restart: option(string),\n  ~?result: option(string),\n  ~?rotate: option(string),\n  ~?rx: option(string),\n  ~?ry: option(string),\n  ~?scale: option(string),\n  ~?seed: option(string),\n  ~?shapeRendering: option(string),\n  ~?slope: option(string),\n  ~?spacing: option(string),\n  ~?specularConstant: option(string),\n  ~?specularExponent: option(string),\n  ~?speed: option(string),\n  ~?spreadMethod: option(string),\n  ~?startOffset: option(string),\n  ~?stdDeviation: option(string),\n  ~?stemh: option(string),\n  ~?stemv: option(string),\n  ~?stitchTiles: option(string),\n  ~?stopColor: option(string),\n  ~?stopOpacity: option(string),\n  ~?strikethroughPosition: option(string),\n  ~?strikethroughThickness: option(string),\n  ~?string: option(string),\n  ~?stroke: option(string),\n  ~?strokeDasharray: option(string),\n  ~?strokeDashoffset: option(string),\n  ~?strokeLinecap: option(string),\n  ~?strokeLinejoin: option(string),\n  ~?strokeMiterlimit: option(string),\n  ~?strokeOpacity: option(string),\n  ~?strokeWidth: option(string),\n  ~?surfaceScale: option(string),\n  ~?systemLanguage: option(string),\n  ~?tableValues: option(string),\n  ~?targetX: option(string),\n  ~?targetY: option(string),\n  ~?textAnchor: option(string),\n  ~?textDecoration: option(string),\n  ~?textLength: option(string),\n  ~?textRendering: option(string),\n  ~?_to: option(string),\n  ~?transform: option(string),\n  ~?u1: option(string),\n  ~?u2: option(string),\n  ~?underlinePosition: option(string),\n  ~?underlineThickness: option(string),\n  ~?unicode: option(string),\n  ~?unicodeBidi: option(string),\n  ~?unicodeRange: option(string),\n  ~?unitsPerEm: option(string),\n  ~?vAlphabetic: option(string),\n  ~?vHanging: option(string),\n  ~?vIdeographic: option(string),\n  ~?vMathematical: option(string),\n  ~?values: option(string),\n  ~?vectorEffect: option(string),\n  ~?version: option(string),\n  ~?vertAdvX: option(string),\n  ~?vertAdvY: option(string),\n  ~?vertOriginX: option(string),\n  ~?vertOriginY: option(string),\n  ~?viewBox: option(string),\n  ~?viewTarget: option(string),\n  ~?visibility: option(string),\n  ~?widths: option(string),\n  ~?wordSpacing: option(string),\n  ~?writingMode: option(string),\n  ~?x: option(string),\n  ~?x1: option(string),\n  ~?x2: option(string),\n  ~?xChannelSelector: option(string),\n  ~?xHeight: option(string),\n  ~?xlinkActuate: option(string),\n  ~?xlinkArcrole: option(string),\n  ~?xlinkHref: option(string),\n  ~?xlinkRole: option(string),\n  ~?xlinkShow: option(string),\n  ~?xlinkTitle: option(string),\n  ~?xlinkType: option(string),\n  ~?xmlns: option(string),\n  ~?xmlnsXlink: option(string),\n  ~?xmlBase: option(string),\n  ~?xmlLang: option(string),\n  ~?xmlSpace: option(string),\n  ~?y: option(string),\n  ~?y1: option(string),\n  ~?y2: option(string),\n  ~?yChannelSelector: option(string),\n  ~?z: option(string),\n  ~?zoomAndPan: option(string),\n  ~?about: option(string),\n  ~?datatype: option(string),\n  ~?inlist: option(string),\n  ~?prefix: option(string),\n  ~?property: option(string),\n  ~?resource: option(string),\n  ~?typeof: option(string),\n  ~?vocab: option(string),\n  ~?dangerouslySetInnerHTML: option(Js.t(&lt; __html : string &gt;)),\n  ~?suppressContentEditableWarning: option(Js.boolean),\n  unit\n) => reactDOMProps", "docs": null, "kind": "value", "args": [["key", "string (optional)"], ["ref", "Js.nullable(Dom.element) => unit (optional)"], ["defaultChecked", "Js.boolean (optional)"], ["defaultValue", "string (optional)"], ["accessKey", "string (optional)"], ["className", "string (optional)"], ["contentEditable", "Js.boolean (optional)"], ["contextMenu", "string (optional)"], ["dir", "string (optional)"], ["draggable", "Js.boolean (optional)"], ["hidden", "Js.boolean (optional)"], ["id", "string (optional)"], ["lang", "string (optional)"], ["role", "string (optional)"], ["style", "style (optional)"], ["spellCheck", "Js.boolean (optional)"], ["tabIndex", "int (optional)"], ["title", "string (optional)"], ["itemID", "string (optional)"], ["itemProp", "string (optional)"], ["itemRef", "string (optional)"], ["itemScope", "Js.boolean (optional)"], ["itemType", "string (optional)"], ["accept", "string (optional)"], ["acceptCharset", "string (optional)"], ["action", "string (optional)"], ["allowFullScreen", "Js.boolean (optional)"], ["alt", "string (optional)"], ["async", "Js.boolean (optional)"], ["autoComplete", "string (optional)"], ["autoFocus", "Js.boolean (optional)"], ["autoPlay", "Js.boolean (optional)"], ["challenge", "string (optional)"], ["charSet", "string (optional)"], ["checked", "Js.boolean (optional)"], ["cite", "string (optional)"], ["crossorigin", "Js.boolean (optional)"], ["cols", "int (optional)"], ["colSpan", "int (optional)"], ["content", "string (optional)"], ["controls", "Js.boolean (optional)"], ["coords", "string (optional)"], ["data", "string (optional)"], ["dateTime", "string (optional)"], ["default", "Js.boolean (optional)"], ["defer", "Js.boolean (optional)"], ["disabled", "Js.boolean (optional)"], ["download", "string (optional)"], ["encType", "string (optional)"], ["form", "string (optional)"], ["formAction", "string (optional)"], ["formTarget", "string (optional)"], ["formMethod", "string (optional)"], ["headers", "string (optional)"], ["height", "string (optional)"], ["high", "int (optional)"], ["href", "string (optional)"], ["hrefLang", "string (optional)"], ["htmlFor", "string (optional)"], ["httpEquiv", "string (optional)"], ["icon", "string (optional)"], ["inputMode", "string (optional)"], ["integrity", "string (optional)"], ["keyType", "string (optional)"], ["kind", "string (optional)"], ["label", "string (optional)"], ["list", "string (optional)"], ["loop", "Js.boolean (optional)"], ["low", "int (optional)"], ["manifest", "string (optional)"], ["max", "string (optional)"], ["maxLength", "int (optional)"], ["media", "string (optional)"], ["mediaGroup", "string (optional)"], ["method", "string (optional)"], ["min", "int (optional)"], ["minLength", "int (optional)"], ["multiple", "Js.boolean (optional)"], ["muted", "Js.boolean (optional)"], ["name", "string (optional)"], ["nonce", "string (optional)"], ["noValidate", "Js.boolean (optional)"], ["_open", "Js.boolean (optional)"], ["optimum", "int (optional)"], ["pattern", "string (optional)"], ["placeholder", "string (optional)"], ["poster", "string (optional)"], ["preload", "string (optional)"], ["radioGroup", "string (optional)"], ["readOnly", "Js.boolean (optional)"], ["rel", "string (optional)"], ["required", "Js.boolean (optional)"], ["reversed", "Js.boolean (optional)"], ["rows", "int (optional)"], ["rowSpan", "int (optional)"], ["sandbox", "string (optional)"], ["scope", "string (optional)"], ["scoped", "Js.boolean (optional)"], ["scrolling", "string (optional)"], ["selected", "Js.boolean (optional)"], ["shape", "string (optional)"], ["size", "int (optional)"], ["sizes", "string (optional)"], ["span", "int (optional)"], ["src", "string (optional)"], ["srcDoc", "string (optional)"], ["srcLang", "string (optional)"], ["srcSet", "string (optional)"], ["start", "int (optional)"], ["step", "float (optional)"], ["summary", "string (optional)"], ["target", "string (optional)"], ["_type", "string (optional)"], ["useMap", "string (optional)"], ["value", "string (optional)"], ["width", "string (optional)"], ["wrap", "string (optional)"], ["onCopy", "ReactEventRe.Clipboard.t => unit (optional)"], ["onCut", "ReactEventRe.Clipboard.t => unit (optional)"], ["onPaste", "ReactEventRe.Clipboard.t => unit (optional)"], ["onCompositionEnd", "ReactEventRe.Composition.t => unit (optional)"], ["onCompositionStart", "ReactEventRe.Composition.t => unit (optional)"], ["onCompositionUpdate", "ReactEventRe.Composition.t => unit (optional)"], ["onKeyDown", "ReactEventRe.Keyboard.t => unit (optional)"], ["onKeyPress", "ReactEventRe.Keyboard.t => unit (optional)"], ["onKeyUp", "ReactEventRe.Keyboard.t => unit (optional)"], ["onFocus", "ReactEventRe.Focus.t => unit (optional)"], ["onBlur", "ReactEventRe.Focus.t => unit (optional)"], ["onChange", "ReactEventRe.Form.t => unit (optional)"], ["onInput", "ReactEventRe.Form.t => unit (optional)"], ["onSubmit", "ReactEventRe.Form.t => unit (optional)"], ["onClick", "ReactEventRe.Mouse.t => unit (optional)"], ["onContextMenu", "ReactEventRe.Mouse.t => unit (optional)"], ["onDoubleClick", "ReactEventRe.Mouse.t => unit (optional)"], ["onDrag", "ReactEventRe.Mouse.t => unit (optional)"], ["onDragEnd", "ReactEventRe.Mouse.t => unit (optional)"], ["onDragEnter", "ReactEventRe.Mouse.t => unit (optional)"], ["onDragExit", "ReactEventRe.Mouse.t => unit (optional)"], ["onDragLeave", "ReactEventRe.Mouse.t => unit (optional)"], ["onDragOver", "ReactEventRe.Mouse.t => unit (optional)"], ["onDragStart", "ReactEventRe.Mouse.t => unit (optional)"], ["onDrop", "ReactEventRe.Mouse.t => unit (optional)"], ["onMouseDown", "ReactEventRe.Mouse.t => unit (optional)"], ["onMouseEnter", "ReactEventRe.Mouse.t => unit (optional)"], ["onMouseLeave", "ReactEventRe.Mouse.t => unit (optional)"], ["onMouseMove", "ReactEventRe.Mouse.t => unit (optional)"], ["onMouseOut", "ReactEventRe.Mouse.t => unit (optional)"], ["onMouseOver", "ReactEventRe.Mouse.t => unit (optional)"], ["onMouseUp", "ReactEventRe.Mouse.t => unit (optional)"], ["onSelect", "ReactEventRe.Selection.t => unit (optional)"], ["onTouchCancel", "ReactEventRe.Touch.t => unit (optional)"], ["onTouchEnd", "ReactEventRe.Touch.t => unit (optional)"], ["onTouchMove", "ReactEventRe.Touch.t => unit (optional)"], ["onTouchStart", "ReactEventRe.Touch.t => unit (optional)"], ["onScroll", "ReactEventRe.UI.t => unit (optional)"], ["onWheel", "ReactEventRe.Wheel.t => unit (optional)"], ["onAbort", "ReactEventRe.Media.t => unit (optional)"], ["onCanPlay", "ReactEventRe.Media.t => unit (optional)"], ["onCanPlayThrough", "ReactEventRe.Media.t => unit (optional)"], ["onDurationChange", "ReactEventRe.Media.t => unit (optional)"], ["onEmptied", "ReactEventRe.Media.t => unit (optional)"], ["onEncrypetd", "ReactEventRe.Media.t => unit (optional)"], ["onEnded", "ReactEventRe.Media.t => unit (optional)"], ["onError", "ReactEventRe.Media.t => unit (optional)"], ["onLoadedData", "ReactEventRe.Media.t => unit (optional)"], ["onLoadedMetadata", "ReactEventRe.Media.t => unit (optional)"], ["onLoadStart", "ReactEventRe.Media.t => unit (optional)"], ["onPause", "ReactEventRe.Media.t => unit (optional)"], ["onPlay", "ReactEventRe.Media.t => unit (optional)"], ["onPlaying", "ReactEventRe.Media.t => unit (optional)"], ["onProgress", "ReactEventRe.Media.t => unit (optional)"], ["onRateChange", "ReactEventRe.Media.t => unit (optional)"], ["onSeeked", "ReactEventRe.Media.t => unit (optional)"], ["onSeeking", "ReactEventRe.Media.t => unit (optional)"], ["onStalled", "ReactEventRe.Media.t => unit (optional)"], ["onSuspend", "ReactEventRe.Media.t => unit (optional)"], ["onTimeUpdate", "ReactEventRe.Media.t => unit (optional)"], ["onVolumeChange", "ReactEventRe.Media.t => unit (optional)"], ["onWaiting", "ReactEventRe.Media.t => unit (optional)"], ["onLoad", "ReactEventRe.Image.t => unit (optional)"], ["onAnimationStart", "ReactEventRe.Animation.t => unit (optional)"], ["onAnimationEnd", "ReactEventRe.Animation.t => unit (optional)"], ["onAnimationIteration", "ReactEventRe.Animation.t => unit (optional)"], ["onTransitionEnd", "ReactEventRe.Transition.t => unit (optional)"], ["accentHeight", "string (optional)"], ["accumulate", "string (optional)"], ["additive", "string (optional)"], ["alignmentBaseline", "string (optional)"], ["allowReorder", "string (optional)"], ["alphabetic", "string (optional)"], ["amplitude", "string (optional)"], ["arabicForm", "string (optional)"], ["ascent", "string (optional)"], ["attributeName", "string (optional)"], ["attributeType", "string (optional)"], ["autoReverse", "string (optional)"], ["azimuth", "string (optional)"], ["baseFrequency", "string (optional)"], ["baseProfile", "string (optional)"], ["baselineShift", "string (optional)"], ["bbox", "string (optional)"], ["_begin", "string (optional)"], ["bias", "string (optional)"], ["by", "string (optional)"], ["calcMode", "string (optional)"], ["capHeight", "string (optional)"], ["clip", "string (optional)"], ["clipPath", "string (optional)"], ["clipPathUnits", "string (optional)"], ["clipRule", "string (optional)"], ["colorInterpolation", "string (optional)"], ["colorInterpolationFilters", "string (optional)"], ["colorProfile", "string (optional)"], ["colorRendering", "string (optional)"], ["contentScriptType", "string (optional)"], ["contentStyleType", "string (optional)"], ["cursor", "string (optional)"], ["cx", "string (optional)"], ["cy", "string (optional)"], ["d", "string (optional)"], ["decelerate", "string (optional)"], ["descent", "string (optional)"], ["diffuseConstant", "string (optional)"], ["direction", "string (optional)"], ["display", "string (optional)"], ["divisor", "string (optional)"], ["dominantBaseline", "string (optional)"], ["dur", "string (optional)"], ["dx", "string (optional)"], ["dy", "string (optional)"], ["edgeMode", "string (optional)"], ["elevation", "string (optional)"], ["enableBackground", "string (optional)"], ["_end", "string (optional)"], ["exponent", "string (optional)"], ["externalResourcesRequired", "string (optional)"], ["fill", "string (optional)"], ["fillOpacity", "string (optional)"], ["fillRule", "string (optional)"], ["filter", "string (optional)"], ["filterRes", "string (optional)"], ["filterUnits", "string (optional)"], ["floodColor", "string (optional)"], ["floodOpacity", "string (optional)"], ["focusable", "string (optional)"], ["fontFamily", "string (optional)"], ["fontSize", "string (optional)"], ["fontSizeAdjust", "string (optional)"], ["fontStretch", "string (optional)"], ["fontStyle", "string (optional)"], ["fontVariant", "string (optional)"], ["fontWeight", "string (optional)"], ["fomat", "string (optional)"], ["from", "string (optional)"], ["fx", "string (optional)"], ["fy", "string (optional)"], ["g1", "string (optional)"], ["g2", "string (optional)"], ["glyphName", "string (optional)"], ["glyphOrientationHorizontal", "string (optional)"], ["glyphOrientationVertical", "string (optional)"], ["glyphRef", "string (optional)"], ["gradientTransform", "string (optional)"], ["gradientUnits", "string (optional)"], ["hanging", "string (optional)"], ["horizAdvX", "string (optional)"], ["horizOriginX", "string (optional)"], ["ideographic", "string (optional)"], ["imageRendering", "string (optional)"], ["_in", "string (optional)"], ["in2", "string (optional)"], ["intercept", "string (optional)"], ["k", "string (optional)"], ["k1", "string (optional)"], ["k2", "string (optional)"], ["k3", "string (optional)"], ["k4", "string (optional)"], ["kernelMatrix", "string (optional)"], ["kernelUnitLength", "string (optional)"], ["kerning", "string (optional)"], ["keyPoints", "string (optional)"], ["keySplines", "string (optional)"], ["keyTimes", "string (optional)"], ["lengthAdjust", "string (optional)"], ["letterSpacing", "string (optional)"], ["lightingColor", "string (optional)"], ["limitingConeAngle", "string (optional)"], ["local", "string (optional)"], ["markerEnd", "string (optional)"], ["markerHeight", "string (optional)"], ["markerMid", "string (optional)"], ["markerStart", "string (optional)"], ["markerUnits", "string (optional)"], ["markerWidth", "string (optional)"], ["mask", "string (optional)"], ["maskContentUnits", "string (optional)"], ["maskUnits", "string (optional)"], ["mathematical", "string (optional)"], ["mode", "string (optional)"], ["numOctaves", "string (optional)"], ["offset", "string (optional)"], ["opacity", "string (optional)"], ["operator", "string (optional)"], ["order", "string (optional)"], ["orient", "string (optional)"], ["orientation", "string (optional)"], ["origin", "string (optional)"], ["overflow", "string (optional)"], ["overflowX", "string (optional)"], ["overflowY", "string (optional)"], ["overlinePosition", "string (optional)"], ["overlineThickness", "string (optional)"], ["paintOrder", "string (optional)"], ["panose1", "string (optional)"], ["pathLength", "string (optional)"], ["patternContentUnits", "string (optional)"], ["patternTransform", "string (optional)"], ["patternUnits", "string (optional)"], ["pointerEvents", "string (optional)"], ["points", "string (optional)"], ["pointsAtX", "string (optional)"], ["pointsAtY", "string (optional)"], ["pointsAtZ", "string (optional)"], ["preserveAlpha", "string (optional)"], ["preserveAspectRatio", "string (optional)"], ["primitiveUnits", "string (optional)"], ["r", "string (optional)"], ["radius", "string (optional)"], ["refX", "string (optional)"], ["refY", "string (optional)"], ["renderingIntent", "string (optional)"], ["repeatCount", "string (optional)"], ["repeatDur", "string (optional)"], ["requiredExtensions", "string (optional)"], ["requiredFeatures", "string (optional)"], ["restart", "string (optional)"], ["result", "string (optional)"], ["rotate", "string (optional)"], ["rx", "string (optional)"], ["ry", "string (optional)"], ["scale", "string (optional)"], ["seed", "string (optional)"], ["shapeRendering", "string (optional)"], ["slope", "string (optional)"], ["spacing", "string (optional)"], ["specularConstant", "string (optional)"], ["specularExponent", "string (optional)"], ["speed", "string (optional)"], ["spreadMethod", "string (optional)"], ["startOffset", "string (optional)"], ["stdDeviation", "string (optional)"], ["stemh", "string (optional)"], ["stemv", "string (optional)"], ["stitchTiles", "string (optional)"], ["stopColor", "string (optional)"], ["stopOpacity", "string (optional)"], ["strikethroughPosition", "string (optional)"], ["strikethroughThickness", "string (optional)"], ["string", "string (optional)"], ["stroke", "string (optional)"], ["strokeDasharray", "string (optional)"], ["strokeDashoffset", "string (optional)"], ["strokeLinecap", "string (optional)"], ["strokeLinejoin", "string (optional)"], ["strokeMiterlimit", "string (optional)"], ["strokeOpacity", "string (optional)"], ["strokeWidth", "string (optional)"], ["surfaceScale", "string (optional)"], ["systemLanguage", "string (optional)"], ["tableValues", "string (optional)"], ["targetX", "string (optional)"], ["targetY", "string (optional)"], ["textAnchor", "string (optional)"], ["textDecoration", "string (optional)"], ["textLength", "string (optional)"], ["textRendering", "string (optional)"], ["_to", "string (optional)"], ["transform", "string (optional)"], ["u1", "string (optional)"], ["u2", "string (optional)"], ["underlinePosition", "string (optional)"], ["underlineThickness", "string (optional)"], ["unicode", "string (optional)"], ["unicodeBidi", "string (optional)"], ["unicodeRange", "string (optional)"], ["unitsPerEm", "string (optional)"], ["vAlphabetic", "string (optional)"], ["vHanging", "string (optional)"], ["vIdeographic", "string (optional)"], ["vMathematical", "string (optional)"], ["values", "string (optional)"], ["vectorEffect", "string (optional)"], ["version", "string (optional)"], ["vertAdvX", "string (optional)"], ["vertAdvY", "string (optional)"], ["vertOriginX", "string (optional)"], ["vertOriginY", "string (optional)"], ["viewBox", "string (optional)"], ["viewTarget", "string (optional)"], ["visibility", "string (optional)"], ["widths", "string (optional)"], ["wordSpacing", "string (optional)"], ["writingMode", "string (optional)"], ["x", "string (optional)"], ["x1", "string (optional)"], ["x2", "string (optional)"], ["xChannelSelector", "string (optional)"], ["xHeight", "string (optional)"], ["xlinkActuate", "string (optional)"], ["xlinkArcrole", "string (optional)"], ["xlinkHref", "string (optional)"], ["xlinkRole", "string (optional)"], ["xlinkShow", "string (optional)"], ["xlinkTitle", "string (optional)"], ["xlinkType", "string (optional)"], ["xmlns", "string (optional)"], ["xmlnsXlink", "string (optional)"], ["xmlBase", "string (optional)"], ["xmlLang", "string (optional)"], ["xmlSpace", "string (optional)"], ["y", "string (optional)"], ["y1", "string (optional)"], ["y2", "string (optional)"], ["yChannelSelector", "string (optional)"], ["z", "string (optional)"], ["zoomAndPan", "string (optional)"], ["about", "string (optional)"], ["datatype", "string (optional)"], ["inlist", "string (optional)"], ["prefix", "string (optional)"], ["property", "string (optional)"], ["resource", "string (optional)"], ["typeof", "string (optional)"], ["vocab", "string (optional)"], ["dangerouslySetInnerHTML", "Js.t(&lt; __html : string &gt;) (optional)"], ["suppressContentEditableWarning", "Js.boolean (optional)"], ["", "unit"]]}, {"path": "ReactDOMRe", "name": "createElement", "type": "let createElement: (\n  string,\n  ~?props: option(reactDOMProps),\n  array(ReasonReact.reactElement)\n) => ReasonReact.reactElement", "docs": null, "kind": "value", "args": [["", "string"], ["props", "reactDOMProps (optional)"], ["", "array(ReasonReact.reactElement)"]]}, {"path": "ReactDOMRe.Style", "name": "t", "type": "type t = style", "docs": null, "kind": "type"}, {"path": "ReactDOMRe.Style", "name": "make", "type": "let make: (\n  ~?azimuth: option(string),\n  ~?background: option(string),\n  ~?backgroundAttachment: option(string),\n  ~?backgroundColor: option(string),\n  ~?backgroundImage: option(string),\n  ~?backgroundPosition: option(string),\n  ~?backgroundRepeat: option(string),\n  ~?border: option(string),\n  ~?borderCollapse: option(string),\n  ~?borderColor: option(string),\n  ~?borderSpacing: option(string),\n  ~?borderStyle: option(string),\n  ~?borderTop: option(string),\n  ~?borderRight: option(string),\n  ~?borderBottom: option(string),\n  ~?borderLeft: option(string),\n  ~?borderTopColor: option(string),\n  ~?borderRightColor: option(string),\n  ~?borderBottomColor: option(string),\n  ~?borderLeftColor: option(string),\n  ~?borderTopStyle: option(string),\n  ~?borderRightStyle: option(string),\n  ~?borderBottomStyle: option(string),\n  ~?borderLeftStyle: option(string),\n  ~?borderTopWidth: option(string),\n  ~?borderRightWidth: option(string),\n  ~?borderBottomWidth: option(string),\n  ~?borderLeftWidth: option(string),\n  ~?borderWidth: option(string),\n  ~?bottom: option(string),\n  ~?captionSide: option(string),\n  ~?clear: option(string),\n  ~?clip: option(string),\n  ~?color: option(string),\n  ~?content: option(string),\n  ~?counterIncrement: option(string),\n  ~?counterReset: option(string),\n  ~?cue: option(string),\n  ~?cueAfter: option(string),\n  ~?cueBefore: option(string),\n  ~?cursor: option(string),\n  ~?direction: option(string),\n  ~?display: option(string),\n  ~?elevation: option(string),\n  ~?emptyCells: option(string),\n  ~?float: option(string),\n  ~?font: option(string),\n  ~?fontFamily: option(string),\n  ~?fontSize: option(string),\n  ~?fontSizeAdjust: option(string),\n  ~?fontStretch: option(string),\n  ~?fontStyle: option(string),\n  ~?fontVariant: option(string),\n  ~?fontWeight: option(string),\n  ~?height: option(string),\n  ~?left: option(string),\n  ~?letterSpacing: option(string),\n  ~?lineHeight: option(string),\n  ~?listStyle: option(string),\n  ~?listStyleImage: option(string),\n  ~?listStylePosition: option(string),\n  ~?listStyleType: option(string),\n  ~?margin: option(string),\n  ~?marginTop: option(string),\n  ~?marginRight: option(string),\n  ~?marginBottom: option(string),\n  ~?marginLeft: option(string),\n  ~?markerOffset: option(string),\n  ~?marks: option(string),\n  ~?maxHeight: option(string),\n  ~?maxWidth: option(string),\n  ~?minHeight: option(string),\n  ~?minWidth: option(string),\n  ~?orphans: option(string),\n  ~?outline: option(string),\n  ~?outlineColor: option(string),\n  ~?outlineStyle: option(string),\n  ~?outlineWidth: option(string),\n  ~?overflow: option(string),\n  ~?overflowX: option(string),\n  ~?overflowY: option(string),\n  ~?padding: option(string),\n  ~?paddingTop: option(string),\n  ~?paddingRight: option(string),\n  ~?paddingBottom: option(string),\n  ~?paddingLeft: option(string),\n  ~?page: option(string),\n  ~?pageBreakAfter: option(string),\n  ~?pageBreakBefore: option(string),\n  ~?pageBreakInside: option(string),\n  ~?pause: option(string),\n  ~?pauseAfter: option(string),\n  ~?pauseBefore: option(string),\n  ~?pitch: option(string),\n  ~?pitchRange: option(string),\n  ~?playDuring: option(string),\n  ~?position: option(string),\n  ~?quotes: option(string),\n  ~?richness: option(string),\n  ~?right: option(string),\n  ~?size: option(string),\n  ~?speak: option(string),\n  ~?speakHeader: option(string),\n  ~?speakNumeral: option(string),\n  ~?speakPunctuation: option(string),\n  ~?speechRate: option(string),\n  ~?stress: option(string),\n  ~?tableLayout: option(string),\n  ~?textAlign: option(string),\n  ~?textDecoration: option(string),\n  ~?textIndent: option(string),\n  ~?textShadow: option(string),\n  ~?textTransform: option(string),\n  ~?top: option(string),\n  ~?unicodeBidi: option(string),\n  ~?verticalAlign: option(string),\n  ~?visibility: option(string),\n  ~?voiceFamily: option(string),\n  ~?volume: option(string),\n  ~?whiteSpace: option(string),\n  ~?widows: option(string),\n  ~?width: option(string),\n  ~?wordSpacing: option(string),\n  ~?zIndex: option(string),\n  ~?opacity: option(string),\n  ~?backgroundOrigin: option(string),\n  ~?backgroundSize: option(string),\n  ~?backgroundClip: option(string),\n  ~?borderRadius: option(string),\n  ~?borderTopLeftRadius: option(string),\n  ~?borderTopRightRadius: option(string),\n  ~?borderBottomLeftRadius: option(string),\n  ~?borderBottomRightRadius: option(string),\n  ~?borderImage: option(string),\n  ~?borderImageSource: option(string),\n  ~?borderImageSlice: option(string),\n  ~?borderImageWidth: option(string),\n  ~?borderImageOutset: option(string),\n  ~?borderImageRepeat: option(string),\n  ~?boxShadow: option(string),\n  ~?columns: option(string),\n  ~?columnCount: option(string),\n  ~?columnFill: option(string),\n  ~?columnGap: option(string),\n  ~?columnRule: option(string),\n  ~?columnRuleColor: option(string),\n  ~?columnRuleStyle: option(string),\n  ~?columnRuleWidth: option(string),\n  ~?columnSpan: option(string),\n  ~?columnWidth: option(string),\n  ~?breakAfter: option(string),\n  ~?breakBefore: option(string),\n  ~?breakInside: option(string),\n  ~?rest: option(string),\n  ~?restAfter: option(string),\n  ~?restBefore: option(string),\n  ~?speakAs: option(string),\n  ~?voiceBalance: option(string),\n  ~?voiceDuration: option(string),\n  ~?voicePitch: option(string),\n  ~?voiceRange: option(string),\n  ~?voiceRate: option(string),\n  ~?voiceStress: option(string),\n  ~?voiceVolume: option(string),\n  ~?objectFit: option(string),\n  ~?objectPosition: option(string),\n  ~?imageResolution: option(string),\n  ~?imageOrientation: option(string),\n  ~?alignContent: option(string),\n  ~?alignItems: option(string),\n  ~?alignSelf: option(string),\n  ~?flex: option(string),\n  ~?flexBasis: option(string),\n  ~?flexDirection: option(string),\n  ~?flexFlow: option(string),\n  ~?flexGrow: option(string),\n  ~?flexShrink: option(string),\n  ~?flexWrap: option(string),\n  ~?justifyContent: option(string),\n  ~?order: option(string),\n  ~?textDecorationColor: option(string),\n  ~?textDecorationLine: option(string),\n  ~?textDecorationSkip: option(string),\n  ~?textDecorationStyle: option(string),\n  ~?textEmphasis: option(string),\n  ~?textEmphasisColor: option(string),\n  ~?textEmphasisPosition: option(string),\n  ~?textEmphasisStyle: option(string),\n  ~?textUnderlinePosition: option(string),\n  ~?fontFeatureSettings: option(string),\n  ~?fontKerning: option(string),\n  ~?fontLanguageOverride: option(string),\n  ~?fontSynthesis: option(string),\n  ~?forntVariantAlternates: option(string),\n  ~?fontVariantCaps: option(string),\n  ~?fontVariantEastAsian: option(string),\n  ~?fontVariantLigatures: option(string),\n  ~?fontVariantNumeric: option(string),\n  ~?fontVariantPosition: option(string),\n  ~?all: option(string),\n  ~?glyphOrientationVertical: option(string),\n  ~?textCombineUpright: option(string),\n  ~?textOrientation: option(string),\n  ~?writingMode: option(string),\n  ~?shapeImageThreshold: option(string),\n  ~?shapeMargin: option(string),\n  ~?shapeOutside: option(string),\n  ~?clipPath: option(string),\n  ~?clipRule: option(string),\n  ~?mask: option(string),\n  ~?maskBorder: option(string),\n  ~?maskBorderMode: option(string),\n  ~?maskBorderOutset: option(string),\n  ~?maskBorderRepeat: option(string),\n  ~?maskBorderSlice: option(string),\n  ~?maskBorderSource: option(string),\n  ~?maskBorderWidth: option(string),\n  ~?maskClip: option(string),\n  ~?maskComposite: option(string),\n  ~?maskImage: option(string),\n  ~?maskMode: option(string),\n  ~?maskOrigin: option(string),\n  ~?maskPosition: option(string),\n  ~?maskRepeat: option(string),\n  ~?maskSize: option(string),\n  ~?maskType: option(string),\n  ~?backgroundBlendMode: option(string),\n  ~?isolation: option(string),\n  ~?mixBlendMode: option(string),\n  ~?boxDecorationBreak: option(string),\n  ~?boxSizing: option(string),\n  ~?caretColor: option(string),\n  ~?navDown: option(string),\n  ~?navLeft: option(string),\n  ~?navRight: option(string),\n  ~?navUp: option(string),\n  ~?outlineOffset: option(string),\n  ~?resize: option(string),\n  ~?textOverflow: option(string),\n  ~?grid: option(string),\n  ~?gridArea: option(string),\n  ~?gridAutoColumns: option(string),\n  ~?gridAutoFlow: option(string),\n  ~?gridAutoRows: option(string),\n  ~?gridColumn: option(string),\n  ~?gridColumnEnd: option(string),\n  ~?gridColumnGap: option(string),\n  ~?gridColumnStart: option(string),\n  ~?gridGap: option(string),\n  ~?gridRow: option(string),\n  ~?gridRowEnd: option(string),\n  ~?gridRowGap: option(string),\n  ~?gridRowStart: option(string),\n  ~?gridTemplate: option(string),\n  ~?gridTemplateAreas: option(string),\n  ~?gridTemplateColumns: option(string),\n  ~?gridTemplateRows: option(string),\n  ~?willChange: option(string),\n  ~?hangingPunctuation: option(string),\n  ~?hyphens: option(string),\n  ~?lineBreak: option(string),\n  ~?overflowWrap: option(string),\n  ~?tabSize: option(string),\n  ~?textAlignLast: option(string),\n  ~?textJustify: option(string),\n  ~?wordBreak: option(string),\n  ~?wordWrap: option(string),\n  ~?animation: option(string),\n  ~?animationDelay: option(string),\n  ~?animationDirection: option(string),\n  ~?animationDuration: option(string),\n  ~?animationFillMode: option(string),\n  ~?animationIterationCount: option(string),\n  ~?animationName: option(string),\n  ~?animationPlayState: option(string),\n  ~?animationTimingFunction: option(string),\n  ~?transition: option(string),\n  ~?transitionDelay: option(string),\n  ~?transitionDuration: option(string),\n  ~?transitionProperty: option(string),\n  ~?transitionTimingFunction: option(string),\n  ~?backfaceVisibility: option(string),\n  ~?perspective: option(string),\n  ~?perspectiveOrigin: option(string),\n  ~?transform: option(string),\n  ~?transformOrigin: option(string),\n  ~?transformStyle: option(string),\n  ~?justifyItems: option(string),\n  ~?justifySelf: option(string),\n  ~?placeContent: option(string),\n  ~?placeItems: option(string),\n  ~?placeSelf: option(string),\n  ~?appearance: option(string),\n  ~?caret: option(string),\n  ~?caretAnimation: option(string),\n  ~?caretShape: option(string),\n  ~?userSelect: option(string),\n  ~?maxLines: option(string),\n  ~?marqueeDirection: option(string),\n  ~?marqueeLoop: option(string),\n  ~?marqueeSpeed: option(string),\n  ~?marqueeStyle: option(string),\n  ~?overflowStyle: option(string),\n  ~?rotation: option(string),\n  ~?rotationPoint: option(string),\n  ~?alignmentBaseline: option(string),\n  ~?baselineShift: option(string),\n  ~?clip: option(string),\n  ~?clipPath: option(string),\n  ~?clipRule: option(string),\n  ~?colorInterpolation: option(string),\n  ~?colorInterpolationFilters: option(string),\n  ~?colorProfile: option(string),\n  ~?colorRendering: option(string),\n  ~?cursor: option(string),\n  ~?dominantBaseline: option(string),\n  ~?fill: option(string),\n  ~?fillOpacity: option(string),\n  ~?fillRule: option(string),\n  ~?filter: option(string),\n  ~?floodColor: option(string),\n  ~?floodOpacity: option(string),\n  ~?glyphOrientationHorizontal: option(string),\n  ~?glyphOrientationVertical: option(string),\n  ~?imageRendering: option(string),\n  ~?kerning: option(string),\n  ~?lightingColor: option(string),\n  ~?markerEnd: option(string),\n  ~?markerMid: option(string),\n  ~?markerStart: option(string),\n  ~?pointerEvents: option(string),\n  ~?shapeRendering: option(string),\n  ~?stopColor: option(string),\n  ~?stopOpacity: option(string),\n  ~?stroke: option(string),\n  ~?strokeDasharray: option(string),\n  ~?strokeDashoffset: option(string),\n  ~?strokeLinecap: option(string),\n  ~?strokeLinejoin: option(string),\n  ~?strokeMiterlimit: option(string),\n  ~?strokeOpacity: option(string),\n  ~?strokeWidth: option(string),\n  ~?textAnchor: option(string),\n  ~?textRendering: option(string),\n  ~?rubyAlign: option(string),\n  ~?rubyMerge: option(string),\n  ~?rubyPosition: option(string),\n  unit\n) => style", "docs": null, "kind": "value", "args": [["azimuth", "string (optional)"], ["background", "string (optional)"], ["backgroundAttachment", "string (optional)"], ["backgroundColor", "string (optional)"], ["backgroundImage", "string (optional)"], ["backgroundPosition", "string (optional)"], ["backgroundRepeat", "string (optional)"], ["border", "string (optional)"], ["borderCollapse", "string (optional)"], ["borderColor", "string (optional)"], ["borderSpacing", "string (optional)"], ["borderStyle", "string (optional)"], ["borderTop", "string (optional)"], ["borderRight", "string (optional)"], ["borderBottom", "string (optional)"], ["borderLeft", "string (optional)"], ["borderTopColor", "string (optional)"], ["borderRightColor", "string (optional)"], ["borderBottomColor", "string (optional)"], ["borderLeftColor", "string (optional)"], ["borderTopStyle", "string (optional)"], ["borderRightStyle", "string (optional)"], ["borderBottomStyle", "string (optional)"], ["borderLeftStyle", "string (optional)"], ["borderTopWidth", "string (optional)"], ["borderRightWidth", "string (optional)"], ["borderBottomWidth", "string (optional)"], ["borderLeftWidth", "string (optional)"], ["borderWidth", "string (optional)"], ["bottom", "string (optional)"], ["captionSide", "string (optional)"], ["clear", "string (optional)"], ["clip", "string (optional)"], ["color", "string (optional)"], ["content", "string (optional)"], ["counterIncrement", "string (optional)"], ["counterReset", "string (optional)"], ["cue", "string (optional)"], ["cueAfter", "string (optional)"], ["cueBefore", "string (optional)"], ["cursor", "string (optional)"], ["direction", "string (optional)"], ["display", "string (optional)"], ["elevation", "string (optional)"], ["emptyCells", "string (optional)"], ["float", "string (optional)"], ["font", "string (optional)"], ["fontFamily", "string (optional)"], ["fontSize", "string (optional)"], ["fontSizeAdjust", "string (optional)"], ["fontStretch", "string (optional)"], ["fontStyle", "string (optional)"], ["fontVariant", "string (optional)"], ["fontWeight", "string (optional)"], ["height", "string (optional)"], ["left", "string (optional)"], ["letterSpacing", "string (optional)"], ["lineHeight", "string (optional)"], ["listStyle", "string (optional)"], ["listStyleImage", "string (optional)"], ["listStylePosition", "string (optional)"], ["listStyleType", "string (optional)"], ["margin", "string (optional)"], ["marginTop", "string (optional)"], ["marginRight", "string (optional)"], ["marginBottom", "string (optional)"], ["marginLeft", "string (optional)"], ["markerOffset", "string (optional)"], ["marks", "string (optional)"], ["maxHeight", "string (optional)"], ["maxWidth", "string (optional)"], ["minHeight", "string (optional)"], ["minWidth", "string (optional)"], ["orphans", "string (optional)"], ["outline", "string (optional)"], ["outlineColor", "string (optional)"], ["outlineStyle", "string (optional)"], ["outlineWidth", "string (optional)"], ["overflow", "string (optional)"], ["overflowX", "string (optional)"], ["overflowY", "string (optional)"], ["padding", "string (optional)"], ["paddingTop", "string (optional)"], ["paddingRight", "string (optional)"], ["paddingBottom", "string (optional)"], ["paddingLeft", "string (optional)"], ["page", "string (optional)"], ["pageBreakAfter", "string (optional)"], ["pageBreakBefore", "string (optional)"], ["pageBreakInside", "string (optional)"], ["pause", "string (optional)"], ["pauseAfter", "string (optional)"], ["pauseBefore", "string (optional)"], ["pitch", "string (optional)"], ["pitchRange", "string (optional)"], ["playDuring", "string (optional)"], ["position", "string (optional)"], ["quotes", "string (optional)"], ["richness", "string (optional)"], ["right", "string (optional)"], ["size", "string (optional)"], ["speak", "string (optional)"], ["speakHeader", "string (optional)"], ["speakNumeral", "string (optional)"], ["speakPunctuation", "string (optional)"], ["speechRate", "string (optional)"], ["stress", "string (optional)"], ["tableLayout", "string (optional)"], ["textAlign", "string (optional)"], ["textDecoration", "string (optional)"], ["textIndent", "string (optional)"], ["textShadow", "string (optional)"], ["textTransform", "string (optional)"], ["top", "string (optional)"], ["unicodeBidi", "string (optional)"], ["verticalAlign", "string (optional)"], ["visibility", "string (optional)"], ["voiceFamily", "string (optional)"], ["volume", "string (optional)"], ["whiteSpace", "string (optional)"], ["widows", "string (optional)"], ["width", "string (optional)"], ["wordSpacing", "string (optional)"], ["zIndex", "string (optional)"], ["opacity", "string (optional)"], ["backgroundOrigin", "string (optional)"], ["backgroundSize", "string (optional)"], ["backgroundClip", "string (optional)"], ["borderRadius", "string (optional)"], ["borderTopLeftRadius", "string (optional)"], ["borderTopRightRadius", "string (optional)"], ["borderBottomLeftRadius", "string (optional)"], ["borderBottomRightRadius", "string (optional)"], ["borderImage", "string (optional)"], ["borderImageSource", "string (optional)"], ["borderImageSlice", "string (optional)"], ["borderImageWidth", "string (optional)"], ["borderImageOutset", "string (optional)"], ["borderImageRepeat", "string (optional)"], ["boxShadow", "string (optional)"], ["columns", "string (optional)"], ["columnCount", "string (optional)"], ["columnFill", "string (optional)"], ["columnGap", "string (optional)"], ["columnRule", "string (optional)"], ["columnRuleColor", "string (optional)"], ["columnRuleStyle", "string (optional)"], ["columnRuleWidth", "string (optional)"], ["columnSpan", "string (optional)"], ["columnWidth", "string (optional)"], ["breakAfter", "string (optional)"], ["breakBefore", "string (optional)"], ["breakInside", "string (optional)"], ["rest", "string (optional)"], ["restAfter", "string (optional)"], ["restBefore", "string (optional)"], ["speakAs", "string (optional)"], ["voiceBalance", "string (optional)"], ["voiceDuration", "string (optional)"], ["voicePitch", "string (optional)"], ["voiceRange", "string (optional)"], ["voiceRate", "string (optional)"], ["voiceStress", "string (optional)"], ["voiceVolume", "string (optional)"], ["objectFit", "string (optional)"], ["objectPosition", "string (optional)"], ["imageResolution", "string (optional)"], ["imageOrientation", "string (optional)"], ["alignContent", "string (optional)"], ["alignItems", "string (optional)"], ["alignSelf", "string (optional)"], ["flex", "string (optional)"], ["flexBasis", "string (optional)"], ["flexDirection", "string (optional)"], ["flexFlow", "string (optional)"], ["flexGrow", "string (optional)"], ["flexShrink", "string (optional)"], ["flexWrap", "string (optional)"], ["justifyContent", "string (optional)"], ["order", "string (optional)"], ["textDecorationColor", "string (optional)"], ["textDecorationLine", "string (optional)"], ["textDecorationSkip", "string (optional)"], ["textDecorationStyle", "string (optional)"], ["textEmphasis", "string (optional)"], ["textEmphasisColor", "string (optional)"], ["textEmphasisPosition", "string (optional)"], ["textEmphasisStyle", "string (optional)"], ["textUnderlinePosition", "string (optional)"], ["fontFeatureSettings", "string (optional)"], ["fontKerning", "string (optional)"], ["fontLanguageOverride", "string (optional)"], ["fontSynthesis", "string (optional)"], ["forntVariantAlternates", "string (optional)"], ["fontVariantCaps", "string (optional)"], ["fontVariantEastAsian", "string (optional)"], ["fontVariantLigatures", "string (optional)"], ["fontVariantNumeric", "string (optional)"], ["fontVariantPosition", "string (optional)"], ["all", "string (optional)"], ["glyphOrientationVertical", "string (optional)"], ["textCombineUpright", "string (optional)"], ["textOrientation", "string (optional)"], ["writingMode", "string (optional)"], ["shapeImageThreshold", "string (optional)"], ["shapeMargin", "string (optional)"], ["shapeOutside", "string (optional)"], ["clipPath", "string (optional)"], ["clipRule", "string (optional)"], ["mask", "string (optional)"], ["maskBorder", "string (optional)"], ["maskBorderMode", "string (optional)"], ["maskBorderOutset", "string (optional)"], ["maskBorderRepeat", "string (optional)"], ["maskBorderSlice", "string (optional)"], ["maskBorderSource", "string (optional)"], ["maskBorderWidth", "string (optional)"], ["maskClip", "string (optional)"], ["maskComposite", "string (optional)"], ["maskImage", "string (optional)"], ["maskMode", "string (optional)"], ["maskOrigin", "string (optional)"], ["maskPosition", "string (optional)"], ["maskRepeat", "string (optional)"], ["maskSize", "string (optional)"], ["maskType", "string (optional)"], ["backgroundBlendMode", "string (optional)"], ["isolation", "string (optional)"], ["mixBlendMode", "string (optional)"], ["boxDecorationBreak", "string (optional)"], ["boxSizing", "string (optional)"], ["caretColor", "string (optional)"], ["navDown", "string (optional)"], ["navLeft", "string (optional)"], ["navRight", "string (optional)"], ["navUp", "string (optional)"], ["outlineOffset", "string (optional)"], ["resize", "string (optional)"], ["textOverflow", "string (optional)"], ["grid", "string (optional)"], ["gridArea", "string (optional)"], ["gridAutoColumns", "string (optional)"], ["gridAutoFlow", "string (optional)"], ["gridAutoRows", "string (optional)"], ["gridColumn", "string (optional)"], ["gridColumnEnd", "string (optional)"], ["gridColumnGap", "string (optional)"], ["gridColumnStart", "string (optional)"], ["gridGap", "string (optional)"], ["gridRow", "string (optional)"], ["gridRowEnd", "string (optional)"], ["gridRowGap", "string (optional)"], ["gridRowStart", "string (optional)"], ["gridTemplate", "string (optional)"], ["gridTemplateAreas", "string (optional)"], ["gridTemplateColumns", "string (optional)"], ["gridTemplateRows", "string (optional)"], ["willChange", "string (optional)"], ["hangingPunctuation", "string (optional)"], ["hyphens", "string (optional)"], ["lineBreak", "string (optional)"], ["overflowWrap", "string (optional)"], ["tabSize", "string (optional)"], ["textAlignLast", "string (optional)"], ["textJustify", "string (optional)"], ["wordBreak", "string (optional)"], ["wordWrap", "string (optional)"], ["animation", "string (optional)"], ["animationDelay", "string (optional)"], ["animationDirection", "string (optional)"], ["animationDuration", "string (optional)"], ["animationFillMode", "string (optional)"], ["animationIterationCount", "string (optional)"], ["animationName", "string (optional)"], ["animationPlayState", "string (optional)"], ["animationTimingFunction", "string (optional)"], ["transition", "string (optional)"], ["transitionDelay", "string (optional)"], ["transitionDuration", "string (optional)"], ["transitionProperty", "string (optional)"], ["transitionTimingFunction", "string (optional)"], ["backfaceVisibility", "string (optional)"], ["perspective", "string (optional)"], ["perspectiveOrigin", "string (optional)"], ["transform", "string (optional)"], ["transformOrigin", "string (optional)"], ["transformStyle", "string (optional)"], ["justifyItems", "string (optional)"], ["justifySelf", "string (optional)"], ["placeContent", "string (optional)"], ["placeItems", "string (optional)"], ["placeSelf", "string (optional)"], ["appearance", "string (optional)"], ["caret", "string (optional)"], ["caretAnimation", "string (optional)"], ["caretShape", "string (optional)"], ["userSelect", "string (optional)"], ["maxLines", "string (optional)"], ["marqueeDirection", "string (optional)"], ["marqueeLoop", "string (optional)"], ["marqueeSpeed", "string (optional)"], ["marqueeStyle", "string (optional)"], ["overflowStyle", "string (optional)"], ["rotation", "string (optional)"], ["rotationPoint", "string (optional)"], ["alignmentBaseline", "string (optional)"], ["baselineShift", "string (optional)"], ["clip", "string (optional)"], ["clipPath", "string (optional)"], ["clipRule", "string (optional)"], ["colorInterpolation", "string (optional)"], ["colorInterpolationFilters", "string (optional)"], ["colorProfile", "string (optional)"], ["colorRendering", "string (optional)"], ["cursor", "string (optional)"], ["dominantBaseline", "string (optional)"], ["fill", "string (optional)"], ["fillOpacity", "string (optional)"], ["fillRule", "string (optional)"], ["filter", "string (optional)"], ["floodColor", "string (optional)"], ["floodOpacity", "string (optional)"], ["glyphOrientationHorizontal", "string (optional)"], ["glyphOrientationVertical", "string (optional)"], ["imageRendering", "string (optional)"], ["kerning", "string (optional)"], ["lightingColor", "string (optional)"], ["markerEnd", "string (optional)"], ["markerMid", "string (optional)"], ["markerStart", "string (optional)"], ["pointerEvents", "string (optional)"], ["shapeRendering", "string (optional)"], ["stopColor", "string (optional)"], ["stopOpacity", "string (optional)"], ["stroke", "string (optional)"], ["strokeDasharray", "string (optional)"], ["strokeDashoffset", "string (optional)"], ["strokeLinecap", "string (optional)"], ["strokeLinejoin", "string (optional)"], ["strokeMiterlimit", "string (optional)"], ["strokeOpacity", "string (optional)"], ["strokeWidth", "string (optional)"], ["textAnchor", "string (optional)"], ["textRendering", "string (optional)"], ["rubyAlign", "string (optional)"], ["rubyMerge", "string (optional)"], ["rubyPosition", "string (optional)"], ["", "unit"]]}, {"path": "ReactDOMRe.Style", "name": "combine", "type": "let combine: (style, style) => style", "docs": null, "kind": "value", "args": [["", "style"], ["", "style"]]}, {"path": "ReactDOMRe.Style", "name": "unsafeAddProp", "type": "let unsafeAddProp: (style, string, string) => style", "docs": null, "kind": "value", "args": [["", "style"], ["", "string"], ["", "string"]]}, {"path": "ReactDOMRe", "name": "Style", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>combine\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>make\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unsafeAddProp\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>t", "docs": null, "kind": "module"}, {"path": "", "name": "ReactDOMRe", "type": "<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_getElementById\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>_getElementsByClassName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>createElement\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>createPortal\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>domElementToObj\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>findDOMNode\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hydrate\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hydrateToElementWithClassName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>hydrateToElementWithId\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>objToDOMProps\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>props\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>render\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>renderToElementWithClassName\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>renderToElementWithId\n<span style='background-color:#afa;border-radius:50%;padding:0 2px;margin-right: 4px'>v</span>unmountComponentAtNode\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>reactDOMProps\n<span style='background-color:#faa;border-radius:50%;padding:0 2px;margin-right: 4px'>t</span>style\n<span style='background-color:#aaf;border-radius:50%;padding:0 2px;margin-right: 4px'>m</span>Style", "docs": null, "kind": "module"}])